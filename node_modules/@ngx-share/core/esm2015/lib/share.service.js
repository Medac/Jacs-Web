/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { CONFIG } from './share.models';
import { shareButtonsProp } from './share.prop';
import { mergeDeep } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "./share.models";
export class ShareService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = {
            prop: shareButtonsProp,
            options: {
                theme: 'default',
                include: [],
                exclude: [],
                size: 0,
                url: null,
                title: null,
                description: null,
                image: null,
                tags: null,
                twitterAccount: null,
                autoSetMeta: true,
                gaTracking: false,
                windowWidth: 800,
                windowHeight: 500,
                moreButtonIcon: 'ellipsis-h',
                lessButtonIcon: 'minus'
            }
        };
        this.config$ = new BehaviorSubject(this.config);
        this.setConfig(config);
    }
    /**
     * @return {?}
     */
    get prop() {
        return this.config.prop;
    }
    /**
     * @return {?}
     */
    get twitterAccount() {
        return this.config.options.twitterAccount;
    }
    /**
     * @return {?}
     */
    get theme() {
        return this.config.options.theme;
    }
    /**
     * @return {?}
     */
    get windowSize() {
        return `width=${this.config.options.windowWidth}, height=${this.config.options.windowHeight}`;
    }
    /**
     * @return {?}
     */
    get url() {
        return this.config.options.url;
    }
    /**
     * @return {?}
     */
    get title() {
        return this.config.options.title;
    }
    /**
     * @return {?}
     */
    get description() {
        return this.config.options.description;
    }
    /**
     * @return {?}
     */
    get image() {
        return this.config.options.image;
    }
    /**
     * @return {?}
     */
    get tags() {
        return this.config.options.tags;
    }
    /**
     * @return {?}
     */
    get autoSetMeta() {
        return this.config.options.autoSetMeta;
    }
    /**
     * @return {?}
     */
    get gaTracking() {
        return this.config.options.gaTracking;
    }
    /**
     * @return {?}
     */
    get size() {
        return this.config.options.size;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    setConfig(config) {
        if (config) {
            this.config = mergeDeep(this.config, config);
            this.config$.next(this.config);
        }
    }
    /**
     * @param {?} name
     * @param {?} data
     * @return {?}
     */
    addButton(name, data) {
        /** @type {?} */
        const config = {
            prop: Object.assign({}, shareButtonsProp, { [name]: data })
        };
        this.setConfig(config);
    }
}
ShareService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ShareService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CONFIG,] }] }
];
/** @nocollapse */ ShareService.ngInjectableDef = i0.defineInjectable({ factory: function ShareService_Factory() { return new ShareService(i0.inject(i1.CONFIG, 8)); }, token: ShareService, providedIn: "root" });
if (false) {
    /** @type {?} */
    ShareService.prototype.config;
    /** @type {?} */
    ShareService.prototype.config$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtc2hhcmUvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9zaGFyZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQW9DLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNoRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDOzs7QUFLcEMsTUFBTSxPQUFPLFlBQVk7Ozs7SUF5QnZCLFlBQXdDLE1BQTBCO1FBdkJsRSxXQUFNLEdBQXVCO1lBQzNCLElBQUksRUFBRSxnQkFBZ0I7WUFDdEIsT0FBTyxFQUFFO2dCQUNQLEtBQUssRUFBRSxTQUFTO2dCQUNoQixPQUFPLEVBQUUsRUFBRTtnQkFDWCxPQUFPLEVBQUUsRUFBRTtnQkFDWCxJQUFJLEVBQUUsQ0FBQztnQkFDUCxHQUFHLEVBQUUsSUFBSTtnQkFDVCxLQUFLLEVBQUUsSUFBSTtnQkFDWCxXQUFXLEVBQUUsSUFBSTtnQkFDakIsS0FBSyxFQUFFLElBQUk7Z0JBQ1gsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsY0FBYyxFQUFFLElBQUk7Z0JBQ3BCLFdBQVcsRUFBRSxJQUFJO2dCQUNqQixVQUFVLEVBQUUsS0FBSztnQkFDakIsV0FBVyxFQUFFLEdBQUc7Z0JBQ2hCLFlBQVksRUFBRSxHQUFHO2dCQUNqQixjQUFjLEVBQUUsWUFBWTtnQkFDNUIsY0FBYyxFQUFFLE9BQU87YUFDeEI7U0FDRixDQUFDO1FBQ0YsWUFBTyxHQUFHLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUd6QyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFFRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCxJQUFJLGNBQWM7UUFDaEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUM7SUFDNUMsQ0FBQzs7OztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFPLFNBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxZQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ2hHLENBQUM7Ozs7SUFFRCxJQUFJLEdBQUc7UUFDTCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUNqQyxDQUFDOzs7O0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFDbkMsQ0FBQzs7OztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO0lBQ3pDLENBQUM7Ozs7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUNuQyxDQUFDOzs7O0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDbEMsQ0FBQzs7OztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO0lBQ3pDLENBQUM7Ozs7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztJQUN4QyxDQUFDOzs7O0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDbEMsQ0FBQzs7Ozs7SUFFRCxTQUFTLENBQUMsTUFBMEI7UUFDbEMsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzdDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNoQztJQUNILENBQUM7Ozs7OztJQUVELFNBQVMsQ0FBQyxJQUFZLEVBQUUsSUFBa0I7O2NBQ2xDLE1BQU0sR0FBRztZQUNiLElBQUksb0JBQU0sZ0JBQWdCLEVBQUssRUFBQyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBQyxDQUFDO1NBQy9DO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6QixDQUFDOzs7WUE1RkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7OzRDQTBCYyxRQUFRLFlBQUksTUFBTSxTQUFDLE1BQU07Ozs7O0lBdkJ0Qyw4QkFvQkU7O0lBQ0YsK0JBQTJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSVNoYXJlQnV0dG9uLCBTaGFyZUJ1dHRvbnNDb25maWcsIENPTkZJRyB9IGZyb20gJy4vc2hhcmUubW9kZWxzJztcclxuaW1wb3J0IHsgc2hhcmVCdXR0b25zUHJvcCB9IGZyb20gJy4vc2hhcmUucHJvcCc7XHJcbmltcG9ydCB7IG1lcmdlRGVlcCB9IGZyb20gJy4vdXRpbHMnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU2hhcmVTZXJ2aWNlIHtcclxuXHJcbiAgY29uZmlnOiBTaGFyZUJ1dHRvbnNDb25maWcgPSB7XHJcbiAgICBwcm9wOiBzaGFyZUJ1dHRvbnNQcm9wLFxyXG4gICAgb3B0aW9uczoge1xyXG4gICAgICB0aGVtZTogJ2RlZmF1bHQnLFxyXG4gICAgICBpbmNsdWRlOiBbXSxcclxuICAgICAgZXhjbHVkZTogW10sXHJcbiAgICAgIHNpemU6IDAsXHJcbiAgICAgIHVybDogbnVsbCxcclxuICAgICAgdGl0bGU6IG51bGwsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiBudWxsLFxyXG4gICAgICBpbWFnZTogbnVsbCxcclxuICAgICAgdGFnczogbnVsbCxcclxuICAgICAgdHdpdHRlckFjY291bnQ6IG51bGwsXHJcbiAgICAgIGF1dG9TZXRNZXRhOiB0cnVlLFxyXG4gICAgICBnYVRyYWNraW5nOiBmYWxzZSxcclxuICAgICAgd2luZG93V2lkdGg6IDgwMCxcclxuICAgICAgd2luZG93SGVpZ2h0OiA1MDAsXHJcbiAgICAgIG1vcmVCdXR0b25JY29uOiAnZWxsaXBzaXMtaCcsXHJcbiAgICAgIGxlc3NCdXR0b25JY29uOiAnbWludXMnXHJcbiAgICB9XHJcbiAgfTtcclxuICBjb25maWckID0gbmV3IEJlaGF2aW9yU3ViamVjdCh0aGlzLmNvbmZpZyk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoQ09ORklHKSBjb25maWc6IFNoYXJlQnV0dG9uc0NvbmZpZykge1xyXG4gICAgdGhpcy5zZXRDb25maWcoY29uZmlnKTtcclxuICB9XHJcblxyXG4gIGdldCBwcm9wKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnByb3A7XHJcbiAgfVxyXG5cclxuICBnZXQgdHdpdHRlckFjY291bnQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWcub3B0aW9ucy50d2l0dGVyQWNjb3VudDtcclxuICB9XHJcblxyXG4gIGdldCB0aGVtZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZy5vcHRpb25zLnRoZW1lO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHdpbmRvd1NpemUoKSB7XHJcbiAgICByZXR1cm4gYHdpZHRoPSR7dGhpcy5jb25maWcub3B0aW9ucy53aW5kb3dXaWR0aH0sIGhlaWdodD0ke3RoaXMuY29uZmlnLm9wdGlvbnMud2luZG93SGVpZ2h0fWA7XHJcbiAgfVxyXG5cclxuICBnZXQgdXJsKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLm9wdGlvbnMudXJsO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHRpdGxlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLm9wdGlvbnMudGl0bGU7XHJcbiAgfVxyXG5cclxuICBnZXQgZGVzY3JpcHRpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWcub3B0aW9ucy5kZXNjcmlwdGlvbjtcclxuICB9XHJcblxyXG4gIGdldCBpbWFnZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZy5vcHRpb25zLmltYWdlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHRhZ3MoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWcub3B0aW9ucy50YWdzO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGF1dG9TZXRNZXRhKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLm9wdGlvbnMuYXV0b1NldE1ldGE7XHJcbiAgfVxyXG5cclxuICBnZXQgZ2FUcmFja2luZygpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZy5vcHRpb25zLmdhVHJhY2tpbmc7XHJcbiAgfVxyXG5cclxuICBnZXQgc2l6ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZy5vcHRpb25zLnNpemU7XHJcbiAgfVxyXG5cclxuICBzZXRDb25maWcoY29uZmlnOiBTaGFyZUJ1dHRvbnNDb25maWcpIHtcclxuICAgIGlmIChjb25maWcpIHtcclxuICAgICAgdGhpcy5jb25maWcgPSBtZXJnZURlZXAodGhpcy5jb25maWcsIGNvbmZpZyk7XHJcbiAgICAgIHRoaXMuY29uZmlnJC5uZXh0KHRoaXMuY29uZmlnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFkZEJ1dHRvbihuYW1lOiBzdHJpbmcsIGRhdGE6IElTaGFyZUJ1dHRvbikge1xyXG4gICAgY29uc3QgY29uZmlnID0ge1xyXG4gICAgICBwcm9wOiB7Li4uc2hhcmVCdXR0b25zUHJvcCwgLi4ue1tuYW1lXTogZGF0YX19XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRDb25maWcoY29uZmlnKTtcclxuICB9XHJcbn1cclxuIl19