/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, Input, Output, HostListener, Inject, EventEmitter, ElementRef, Renderer2, ChangeDetectorRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { Meta } from '@angular/platform-browser';
import { Platform } from '@angular/cdk/platform';
import { of, interval, Subscription, EMPTY } from 'rxjs';
import { tap, take, switchMap, takeWhile, finalize, catchError } from 'rxjs/operators';
import { ShareService } from './share.service';
import { getValidUrl } from './utils';
export class ShareDirective {
    /**
     * @param {?} meta
     * @param {?} el
     * @param {?} http
     * @param {?} platform
     * @param {?} renderer
     * @param {?} cd
     * @param {?} shareService
     * @param {?} document
     */
    constructor(meta, el, http, platform, renderer, cd, shareService, document) {
        this.meta = meta;
        this.el = el;
        this.http = http;
        this.platform = platform;
        this.renderer = renderer;
        this.cd = cd;
        this.shareService = shareService;
        this.document = document;
        /**
         * share window closed subscription (to unsubscribe if the button is destroyed before the share window closes)
         */
        this._shareWindowClosed = Subscription.EMPTY;
        /**
         * Get share count
         */
        this.getCount = false;
        /**
         * Set meta tags from document head, useful when SEO is supported
         */
        this.autoSetMeta = this.shareService.autoSetMeta;
        /**
         * Meta tags inputs - initialized from the global options
         */
        this.url = this.shareService.url;
        this.title = this.shareService.title;
        this.description = this.shareService.description;
        this.image = this.shareService.image;
        this.tags = this.shareService.tags;
        /**
         * Stream that emits when share count is fetched
         */
        this.count = new EventEmitter();
        /**
         * Stream that emits when share dialog is opened
         */
        this.opened = new EventEmitter();
        /**
         * Stream that emits when share dialog is closed
         */
        this.closed = new EventEmitter();
    }
    /**
     * Share link on element click
     * @return {?}
     */
    onClick() {
        if (this.platform.isBrowser) {
            /** @type {?} */
            const metaTags = this.autoSetMeta ? {
                url: this.url,
                title: this.title || this.getMetaTagContent('og:title'),
                description: this.description || this.getMetaTagContent('og:description'),
                image: this.image || this.getMetaTagContent('og:image'),
                via: this.shareService.twitterAccount,
                tags: this.tags,
            } : {
                url: this.url,
                title: this.title,
                description: this.description,
                image: this.image,
                tags: this.tags,
                via: this.shareService.twitterAccount,
            };
            // Share the link
            // @ts-ignore
            of({
                el: this.el.nativeElement,
                renderer: this.renderer,
                prop: this.prop,
                cd: this.cd,
                document: this.document,
                platform: this.getPlatform(),
                metaTags
            }).pipe(...this.prop.share.operators, tap((sharerURL) => this.share(sharerURL)), take(1)).subscribe();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.platform.isBrowser) {
            if (changes['shareButton'] && (changes['shareButton'].firstChange || changes['shareButton'].previousValue !== this.shareButton)) {
                this.createShareButton(this.shareButton);
            }
            if (!this.url || (changes['url'] && changes['url'].previousValue !== this.url)) {
                this.url = getValidUrl(this.autoSetMeta
                    ? this.url || this.getMetaTagContent('og:url')
                    : this.url, this.document.defaultView.location.href);
                if (this.getCount && this.prop.count) {
                    this.shareCount(this.url).subscribe((count) => this.count.emit(count));
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._shareWindowClosed.unsubscribe();
    }
    /**
     * Open sharing dialog
     * @param {?} url - Share URL
     * @return {?}
     */
    share(url) {
        if (url) {
            // GA Tracking
            if (this.shareService.gaTracking && ((/** @type {?} */ (this.document.defaultView))).ga) {
                ((/** @type {?} */ (this.document.defaultView))).ga('send', 'social', this.prop.type, 'click', this.url);
            }
            // Open share pop up and activate its opened and closed events
            this._shareWindowClosed = of(this.document.defaultView.open(url, 'newwindow', this.shareService.windowSize)).pipe(tap(() => this.opened.emit(this.prop.type)), switchMap((popUp) => interval(200).pipe(takeWhile(() => !popUp.closed))), finalize(() => this.closed.emit(this.prop.type))).subscribe();
        }
    }
    /**
     * @param {?} shareUrl
     * @return {?}
     */
    shareCount(shareUrl) {
        /** @type {?} */
        const options = this.prop.count;
        return options.request === 'jsonp'
            ?
                // @ts-ignore
                this.http.jsonp(options.url + shareUrl, 'callback').pipe(...options.operators, catchError(() => EMPTY))
            :
                // @ts-ignore
                this.http.get(options.url + shareUrl, options.args).pipe(...options.operators, catchError(() => EMPTY));
    }
    /**
     * @param {?} buttonsName
     * @return {?}
     */
    createShareButton(buttonsName) {
        /** @type {?} */
        const button = Object.assign({}, this.shareService.prop[buttonsName]);
        if (button) {
            // Set share button properties
            this.prop = button;
            // Remove previous button class
            this.renderer.removeClass(this.el.nativeElement, `sb-${this._buttonClass}`);
            // Add new button class
            this.renderer.addClass(this.el.nativeElement, `sb-${button.type}`);
            // Set button css color variable
            this.el.nativeElement.style.setProperty('--button-color', this.prop.color);
            // Keep a copy of the class for future replacement
            this._buttonClass = button.type;
            // Set aria-label attribute
            this.renderer.setAttribute(this.el.nativeElement, 'aria-label', button.ariaLabel || button.text);
        }
        else {
            throw new Error(`[ShareButtons]: The share button '${buttonsName}' does not exist!`);
        }
    }
    /**
     * Get meta tag content
     * @param {?} key
     * @return {?}
     */
    getMetaTagContent(key) {
        /** @type {?} */
        const metaUsingProperty = this.meta.getTag(`property="${key}"`);
        if (metaUsingProperty)
            return metaUsingProperty.getAttribute('content');
        /** @type {?} */
        const metaUsingName = this.meta.getTag(`name="${key}"`);
        if (metaUsingName)
            return metaUsingName.getAttribute('content');
    }
    /**
     * @return {?}
     */
    getPlatform() {
        if (this.platform.IOS)
            return 'ois';
        if (this.platform.ANDROID)
            return 'android';
        return 'desktop';
    }
}
ShareDirective.decorators = [
    { type: Directive, args: [{
                selector: '[shareButton], [share-button]'
            },] }
];
/** @nocollapse */
ShareDirective.ctorParameters = () => [
    { type: Meta },
    { type: ElementRef },
    { type: HttpClient },
    { type: Platform },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: ShareService },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
ShareDirective.propDecorators = {
    shareButton: [{ type: Input }],
    getCount: [{ type: Input }],
    autoSetMeta: [{ type: Input }],
    url: [{ type: Input }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    image: [{ type: Input }],
    tags: [{ type: Input }],
    count: [{ type: Output }],
    opened: [{ type: Output }],
    closed: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /**
     * A ref to button class - used to remove previous class when the button type is changed
     * @type {?}
     */
    ShareDirective.prototype._buttonClass;
    /**
     * share window closed subscription (to unsubscribe if the button is destroyed before the share window closes)
     * @type {?}
     */
    ShareDirective.prototype._shareWindowClosed;
    /**
     * Button properties
     * @type {?}
     */
    ShareDirective.prototype.prop;
    /**
     * Share button type
     * @type {?}
     */
    ShareDirective.prototype.shareButton;
    /**
     * Get share count
     * @type {?}
     */
    ShareDirective.prototype.getCount;
    /**
     * Set meta tags from document head, useful when SEO is supported
     * @type {?}
     */
    ShareDirective.prototype.autoSetMeta;
    /**
     * Meta tags inputs - initialized from the global options
     * @type {?}
     */
    ShareDirective.prototype.url;
    /** @type {?} */
    ShareDirective.prototype.title;
    /** @type {?} */
    ShareDirective.prototype.description;
    /** @type {?} */
    ShareDirective.prototype.image;
    /** @type {?} */
    ShareDirective.prototype.tags;
    /**
     * Stream that emits when share count is fetched
     * @type {?}
     */
    ShareDirective.prototype.count;
    /**
     * Stream that emits when share dialog is opened
     * @type {?}
     */
    ShareDirective.prototype.opened;
    /**
     * Stream that emits when share dialog is closed
     * @type {?}
     */
    ShareDirective.prototype.closed;
    /** @type {?} */
    ShareDirective.prototype.meta;
    /** @type {?} */
    ShareDirective.prototype.el;
    /** @type {?} */
    ShareDirective.prototype.http;
    /** @type {?} */
    ShareDirective.prototype.platform;
    /** @type {?} */
    ShareDirective.prototype.renderer;
    /** @type {?} */
    ShareDirective.prototype.cd;
    /** @type {?} */
    ShareDirective.prototype.shareService;
    /** @type {?} */
    ShareDirective.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,