/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { of } from 'rxjs';
import { map, delay, switchMap, catchError } from 'rxjs/operators';
import { copyToClipboard, mergeDeep } from './utils';
/**
 * Meta tags operator - Serialize meta tags into the sharer URL
 * @type {?}
 */
export const metaTagsOperators = [
    map((ref) => {
        // Social network sharer URL */
        /** @type {?} */
        const SharerURL = ref.prop.share[ref.platform];
        if (SharerURL) {
            // object contains supported meta tags
            /** @type {?} */
            const metaTags = ref.prop.share.metaTags;
            // object contains meta tags values */
            /** @type {?} */
            const metaTagsValues = ref.metaTags;
            /** @type {?} */
            let link = '';
            // Set each meta tag with user value
            if (metaTags) {
                link = Object.entries(metaTags).map(([key, metaTag]) => metaTagsValues[key] ? `${metaTag}=${encodeURIComponent(metaTagsValues[key])}` : '').join('&');
            }
            return SharerURL + link;
        }
        return;
    })
];
/**
 * Print button operator
 * @type {?}
 */
export const printOperators = [
    map((ref) => ref.document.defaultView.print())
];
/**
 * Copy link to clipboard, used for copy button
 * @type {?}
 */
export const copyOperators = [
    map((ref) => {
        // Disable the button
        ref.renderer.setStyle(ref.el, 'pointer-events', 'none');
        ref.temp = { text: ref.prop.text, icon: ref.prop.icon };
        ref.metaTags.url = decodeURIComponent(ref.metaTags.url);
        return ref;
    }),
    switchMap((ref) => copyToClipboard(ref).pipe(map(() => {
        ref.prop.text = ref.prop.successText;
        ref.prop.icon = ref.prop.successIcon;
        return ref;
    }), catchError(() => {
        ref.prop.text = ref.prop.failText;
        ref.prop.icon = ref.prop.failIcon;
        return of(ref);
    }))),
    map((ref) => {
        ref.cd.markForCheck();
        return ref;
    }),
    delay(2000),
    map((ref) => {
        // Enable the button
        ref.renderer.setStyle(ref.el, 'pointer-events', 'auto');
        // Reset copy button text and icon */
        ref.prop.text = ref.temp.text;
        ref.prop.icon = ref.temp.icon;
        ref.cd.markForCheck();
    })
];
/**
 * Add the share URL to message body, used for WhatsApp and Email buttons
 * @type {?}
 */
export const urlInMessageOperators = [
    map((ref) => {
        /** @type {?} */
        const description = ref.metaTags.description;
        /** @type {?} */
        const url = ref.metaTags.url;
        /** @type {?} */
        const newRef = {
            metaTags: {
                description: description ? `${description}\r\n${url}` : url
            }
        };
        return mergeDeep(ref, newRef);
    })
];
/** @type {?} */
export const FacebookCountOperators = [
    map((res) => +res.share.share_count)
];
/** @type {?} */
export const PinterestCountOperators = [
    map((text) => JSON.parse(text.replace(/^receiveCount\((.*)\)/, '$1'))),
    map((res) => +res.count)
];
/** @type {?} */
export const TumblrCountOperators = [
    map((res) => +res.response.note_count)
];
//# sourceMappingURL=data:application/json;base64,