import { InjectionToken, Inject, Injectable, Optional, NgModule, Directive, Input, Output, HostListener, EventEmitter, ElementRef, Renderer2, ChangeDetectorRef, Pipe, defineInjectable, inject } from '@angular/core';
import { of, BehaviorSubject, interval, Subscription, EMPTY } from 'rxjs';
import { tap, map, delay, switchMap, catchError, take, takeWhile, finalize } from 'rxjs/operators';
import { DOCUMENT } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { Meta } from '@angular/platform-browser';
import { Platform, PlatformModule } from '@angular/cdk/platform';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const CONFIG = new InjectionToken('SHARE_BUTTONS_CONFIG');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * Simple object check.
 * @param {?} item
 * @return {?}
 */
function isObject(item) {
    return (item && typeof item === 'object' && !Array.isArray(item));
}
/**
 * Deep merge two objects.
 * @param {?} target
 * @param {...?} sources
 * @return {?}
 */
function mergeDeep(target, ...sources) {
    if (!sources.length) {
        return target;
    }
    /** @type {?} */
    const source = sources.shift();
    if (isObject(target) && isObject(source)) {
        for (const key in source) {
            if (isObject(source[key])) {
                if (!target[key]) {
                    Object.assign(target, { [key]: {} });
                }
                mergeDeep(target[key], source[key]);
            }
            else {
                Object.assign(target, { [key]: source[key] });
            }
        }
    }
    return mergeDeep(target, ...sources);
}
/**
 * Returns a readable number from share count
 * @param {?} num
 * @param {?} digits
 * @return {?}
 */
function shareCountFormatter(num, digits) {
    /** @type {?} */
    const si = [
        { value: 1E9, symbol: 'B' },
        { value: 1E6, symbol: 'M' },
        { value: 1E3, symbol: 'K' }
    ];
    /** @type {?} */
    const rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
    for (let i = 0; i < si.length; i++) {
        if (num >= si[i].value) {
            return (num / si[i].value).toFixed(digits).replace(rx, '$1') + si[i].symbol;
        }
    }
    return num.toFixed(digits).replace(rx, '$1');
}
/**
 * Copy text to clipboard
 * @param {?} ref
 * @return {?}
 */
function copyToClipboard(ref) {
    return of(ref.metaTags.url).pipe(tap((url) => {
        // Create a hidden TextArea element
        /** @type {?} */
        const textArea = (/** @type {?} */ (ref.document.createElement('textarea')));
        textArea.value = url;
        ref.document.body.appendChild(textArea);
        // highlight TextArea to copy the text
        if (ref.platform === 'ios') {
            /** @type {?} */
            const range = ref.document.createRange();
            range.selectNodeContents(textArea);
            /** @type {?} */
            const selection = ref.document.defaultView.getSelection();
            selection.removeAllRanges();
            selection.addRange(range);
            textArea.readOnly = true;
            textArea.setSelectionRange(0, 999999);
        }
        else {
            textArea.select();
        }
        ref.document.execCommand('copy');
        ref.document.body.removeChild(textArea);
    }));
}
/**
 * Returns a valid URL or falls back to current URL
 * @param {?} url
 * @param {?} fallbackUrl
 * @return {?}
 */
function getValidUrl(url, fallbackUrl) {
    if (url) {
        /** @type {?} */
        const r = /(http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
        if (r.test(url))
            return url;
        console.warn(`[ShareButtons]: Sharing link '${url}' is invalid!`);
    }
    return fallbackUrl;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * Meta tags operator - Serialize meta tags into the sharer URL
 * @type {?}
 */
const metaTagsOperators = [
    map((ref) => {
        // Social network sharer URL */
        /** @type {?} */
        const SharerURL = ref.prop.share[ref.platform];
        if (SharerURL) {
            // object contains supported meta tags
            /** @type {?} */
            const metaTags = ref.prop.share.metaTags;
            // object contains meta tags values */
            /** @type {?} */
            const metaTagsValues = ref.metaTags;
            /** @type {?} */
            let link = '';
            // Set each meta tag with user value
            if (metaTags) {
                link = Object.entries(metaTags).map(([key, metaTag]) => metaTagsValues[key] ? `${metaTag}=${encodeURIComponent(metaTagsValues[key])}` : '').join('&');
            }
            return SharerURL + link;
        }
        return;
    })
];
/**
 * Print button operator
 * @type {?}
 */
const printOperators = [
    map((ref) => ref.document.defaultView.print())
];
/**
 * Copy link to clipboard, used for copy button
 * @type {?}
 */
const copyOperators = [
    map((ref) => {
        // Disable the button
        ref.renderer.setStyle(ref.el, 'pointer-events', 'none');
        ref.temp = { text: ref.prop.text, icon: ref.prop.icon };
        ref.metaTags.url = decodeURIComponent(ref.metaTags.url);
        return ref;
    }),
    switchMap((ref) => copyToClipboard(ref).pipe(map(() => {
        ref.prop.text = ref.prop.successText;
        ref.prop.icon = ref.prop.successIcon;
        return ref;
    }), catchError(() => {
        ref.prop.text = ref.prop.failText;
        ref.prop.icon = ref.prop.failIcon;
        return of(ref);
    }))),
    map((ref) => {
        ref.cd.markForCheck();
        return ref;
    }),
    delay(2000),
    map((ref) => {
        // Enable the button
        ref.renderer.setStyle(ref.el, 'pointer-events', 'auto');
        // Reset copy button text and icon */
        ref.prop.text = ref.temp.text;
        ref.prop.icon = ref.temp.icon;
        ref.cd.markForCheck();
    })
];
/**
 * Add the share URL to message body, used for WhatsApp and Email buttons
 * @type {?}
 */
const urlInMessageOperators = [
    map((ref) => {
        /** @type {?} */
        const description = ref.metaTags.description;
        /** @type {?} */
        const url = ref.metaTags.url;
        /** @type {?} */
        const newRef = {
            metaTags: {
                description: description ? `${description}\r\n${url}` : url
            }
        };
        return mergeDeep(ref, newRef);
    })
];
/** @type {?} */
const FacebookCountOperators = [
    map((res) => +res.share.share_count)
];
/** @type {?} */
const PinterestCountOperators = [
    map((text) => JSON.parse(text.replace(/^receiveCount\((.*)\)/, '$1'))),
    map((res) => +res.count)
];
/** @type {?} */
const TumblrCountOperators = [
    map((res) => +res.response.note_count)
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const shareButtonsProp = {
    facebook: {
        type: 'facebook',
        text: 'Facebook',
        icon: ['fab', 'facebook-f'],
        color: '#4267B2',
        share: {
            desktop: 'https://www.facebook.com/sharer/sharer.php?',
            android: 'https://www.facebook.com/sharer/sharer.php?',
            ios: 'https://www.facebook.com/sharer/sharer.php?',
            operators: metaTagsOperators,
            metaTags: {
                url: 'u'
            }
        },
        count: {
            request: 'http',
            url: 'https://graph.facebook.com?id=',
            operators: FacebookCountOperators
        }
    },
    twitter: {
        type: 'twitter',
        text: 'Twitter',
        icon: ['fab', 'twitter'],
        color: '#00acee',
        share: {
            desktop: 'https://twitter.com/intent/tweet?',
            android: 'https://twitter.com/intent/tweet?',
            ios: 'https://twitter.com/intent/tweet?',
            operators: metaTagsOperators,
            metaTags: {
                url: 'url',
                description: 'text',
                tags: 'hashtags',
                via: 'via'
            }
        }
    },
    google: {
        type: 'google',
        text: 'Google+',
        icon: ['fab', 'google-plus-g'],
        color: '#DB4437',
        share: {
            desktop: 'https://plus.google.com/share?',
            android: 'https://plus.google.com/share?',
            ios: 'https://plus.google.com/share?',
            metaTags: {
                url: 'url',
            },
            operators: metaTagsOperators
        }
    },
    linkedin: {
        type: 'linkedin',
        text: 'LinkedIn',
        icon: ['fab', 'linkedin-in'],
        color: '#006fa6',
        share: {
            desktop: 'http://www.linkedin.com/shareArticle?',
            android: 'http://www.linkedin.com/shareArticle?',
            ios: 'http://www.linkedin.com/shareArticle?',
            operators: metaTagsOperators,
            metaTags: {
                url: 'url',
                title: 'title',
                description: 'summary'
            },
        }
    },
    pinterest: {
        type: 'pinterest',
        text: 'Pinterest',
        icon: ['fab', 'pinterest-p'],
        color: '#BD091D',
        share: {
            desktop: 'https://in.pinterest.com/pin/create/button/?',
            android: 'https://in.pinterest.com/pin/create/button/?',
            ios: 'https://in.pinterest.com/pin/create/button/?',
            operators: metaTagsOperators,
            metaTags: {
                url: 'url',
                description: 'description',
                image: 'media'
            }
        },
        count: {
            request: 'http',
            url: 'https://api.pinterest.com/v1/urls/count.json?url=',
            args: { responseType: 'text' },
            operators: PinterestCountOperators
        }
    },
    reddit: {
        type: 'reddit',
        text: 'Reddit',
        icon: ['fab', 'reddit-alien'],
        color: '#FF4006',
        share: {
            desktop: 'http://www.reddit.com/submit?',
            android: 'http://www.reddit.com/submit?',
            ios: 'http://www.reddit.com/submit?',
            operators: metaTagsOperators,
            metaTags: {
                url: 'url',
                title: 'title'
            },
        }
    },
    tumblr: {
        type: 'tumblr',
        text: 'Tumblr',
        icon: ['fab', 'tumblr'],
        color: '#36465D',
        share: {
            desktop: 'http://tumblr.com/widgets/share/tool?',
            android: 'http://tumblr.com/widgets/share/tool?',
            ios: 'http://tumblr.com/widgets/share/tool?',
            operators: metaTagsOperators,
            metaTags: {
                url: 'canonicalUrl',
                description: 'caption',
                tags: 'tags'
            }
        },
        count: {
            request: 'jsonp',
            url: 'https://api.tumblr.com/v2/share/stats?url=',
            operators: TumblrCountOperators
        }
    },
    whatsapp: {
        type: 'whatsapp',
        text: 'WhatsApp',
        icon: ['fab', 'whatsapp'],
        color: '#25D366',
        share: {
            desktop: 'https://web.whatsapp.com/send?',
            android: 'whatsapp://send?',
            ios: 'whatsapp://send?',
            operators: [
                ...urlInMessageOperators,
                ...metaTagsOperators
            ],
            metaTags: {
                description: 'text'
            }
        }
    },
    messenger: {
        type: 'messenger',
        text: 'Messenger',
        icon: ['fab', 'facebook-messenger'],
        color: '#0080FF',
        share: {
            android: 'fb-messenger://share/?',
            ios: 'fb-messenger://share/?',
            operators: metaTagsOperators,
            metaTags: {
                url: 'link'
            }
        }
    },
    telegram: {
        type: 'telegram',
        text: 'Telegram',
        icon: ['fab', 'telegram-plane'],
        color: '#0088cc',
        share: {
            desktop: 'https://t.me/share/url?',
            android: 'https://t.me/share/url?',
            ios: 'https://t.me/share/url?',
            operators: metaTagsOperators,
            metaTags: {
                url: 'url',
                description: 'text'
            }
        }
    },
    vk: {
        type: 'vk',
        text: 'VKontakte',
        icon: ['fab', 'vk'],
        color: '#4C75A3',
        share: {
            desktop: 'http://vk.com/share.php?',
            android: 'http://vk.com/share.php?',
            ios: 'http://vk.com/share.php?',
            operators: metaTagsOperators,
            metaTags: {
                url: 'url'
            }
        }
    },
    stumble: {
        type: 'stumble',
        text: 'Stumble',
        icon: ['fab', 'stumbleupon'],
        color: '#eb4924',
        share: {
            desktop: 'http://www.stumbleupon.com/submit?',
            android: 'http://www.stumbleupon.com/submit?',
            ios: 'http://www.stumbleupon.com/submit?',
            operators: metaTagsOperators,
            metaTags: {
                url: 'url'
            }
        }
    },
    xing: {
        type: 'xing',
        text: 'Xing',
        icon: ['fab', 'xing'],
        color: '#006567',
        share: {
            desktop: 'https://www.xing.com/app/user?op=share&',
            android: 'https://www.xing.com/app/user?op=share&',
            ios: 'https://www.xing.com/app/user?op=share&',
            operators: metaTagsOperators,
            metaTags: {
                url: 'url'
            }
        }
    },
    sms: {
        type: 'sms',
        text: 'SMS',
        icon: 'comment-alt',
        color: '#20c16c',
        share: {
            desktop: 'sms:?',
            android: 'sms:?',
            ios: 'sms:&',
            metaTags: {
                description: 'body'
            },
            operators: [
                ...urlInMessageOperators,
                ...metaTagsOperators
            ]
        }
    },
    email: {
        type: 'email',
        text: 'Email',
        icon: 'envelope',
        color: '#FF961C',
        share: {
            desktop: 'mailto:?',
            android: 'mailto:?',
            ios: 'mailto:?',
            operators: [
                ...urlInMessageOperators,
                ...metaTagsOperators
            ],
            metaTags: {
                title: 'subject',
                description: 'body'
            }
        }
    },
    copy: {
        type: 'copy',
        text: 'Copy link',
        successText: 'Copied',
        successIcon: 'check',
        failText: 'Error',
        failIcon: 'exclamation',
        icon: 'link',
        color: '#607D8B',
        share: {
            operators: copyOperators
        }
    },
    print: {
        type: 'print',
        text: 'Print',
        icon: 'print',
        color: '#765AA2',
        share: {
            operators: printOperators
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class ShareService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = {
            prop: shareButtonsProp,
            options: {
                theme: 'default',
                include: [],
                exclude: [],
                size: 0,
                url: null,
                title: null,
                description: null,
                image: null,
                tags: null,
                twitterAccount: null,
                autoSetMeta: true,
                gaTracking: false,
                windowWidth: 800,
                windowHeight: 500,
                moreButtonIcon: 'ellipsis-h',
                lessButtonIcon: 'minus'
            }
        };
        this.config$ = new BehaviorSubject(this.config);
        this.setConfig(config);
    }
    /**
     * @return {?}
     */
    get prop() {
        return this.config.prop;
    }
    /**
     * @return {?}
     */
    get twitterAccount() {
        return this.config.options.twitterAccount;
    }
    /**
     * @return {?}
     */
    get theme() {
        return this.config.options.theme;
    }
    /**
     * @return {?}
     */
    get windowSize() {
        return `width=${this.config.options.windowWidth}, height=${this.config.options.windowHeight}`;
    }
    /**
     * @return {?}
     */
    get url() {
        return this.config.options.url;
    }
    /**
     * @return {?}
     */
    get title() {
        return this.config.options.title;
    }
    /**
     * @return {?}
     */
    get description() {
        return this.config.options.description;
    }
    /**
     * @return {?}
     */
    get image() {
        return this.config.options.image;
    }
    /**
     * @return {?}
     */
    get tags() {
        return this.config.options.tags;
    }
    /**
     * @return {?}
     */
    get autoSetMeta() {
        return this.config.options.autoSetMeta;
    }
    /**
     * @return {?}
     */
    get gaTracking() {
        return this.config.options.gaTracking;
    }
    /**
     * @return {?}
     */
    get size() {
        return this.config.options.size;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    setConfig(config) {
        if (config) {
            this.config = mergeDeep(this.config, config);
            this.config$.next(this.config);
        }
    }
    /**
     * @param {?} name
     * @param {?} data
     * @return {?}
     */
    addButton(name, data) {
        /** @type {?} */
        const config = {
            prop: Object.assign({}, shareButtonsProp, { [name]: data })
        };
        this.setConfig(config);
    }
}
ShareService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ShareService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CONFIG,] }] }
];
/** @nocollapse */ ShareService.ngInjectableDef = defineInjectable({ factory: function ShareService_Factory() { return new ShareService(inject(CONFIG, 8)); }, token: ShareService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class ShareDirective {
    /**
     * @param {?} meta
     * @param {?} el
     * @param {?} http
     * @param {?} platform
     * @param {?} renderer
     * @param {?} cd
     * @param {?} shareService
     * @param {?} document
     */
    constructor(meta, el, http, platform, renderer, cd, shareService, document) {
        this.meta = meta;
        this.el = el;
        this.http = http;
        this.platform = platform;
        this.renderer = renderer;
        this.cd = cd;
        this.shareService = shareService;
        this.document = document;
        /**
         * share window closed subscription (to unsubscribe if the button is destroyed before the share window closes)
         */
        this._shareWindowClosed = Subscription.EMPTY;
        /**
         * Get share count
         */
        this.getCount = false;
        /**
         * Set meta tags from document head, useful when SEO is supported
         */
        this.autoSetMeta = this.shareService.autoSetMeta;
        /**
         * Meta tags inputs - initialized from the global options
         */
        this.url = this.shareService.url;
        this.title = this.shareService.title;
        this.description = this.shareService.description;
        this.image = this.shareService.image;
        this.tags = this.shareService.tags;
        /**
         * Stream that emits when share count is fetched
         */
        this.count = new EventEmitter();
        /**
         * Stream that emits when share dialog is opened
         */
        this.opened = new EventEmitter();
        /**
         * Stream that emits when share dialog is closed
         */
        this.closed = new EventEmitter();
    }
    /**
     * Share link on element click
     * @return {?}
     */
    onClick() {
        if (this.platform.isBrowser) {
            /** @type {?} */
            const metaTags = this.autoSetMeta ? {
                url: this.url,
                title: this.title || this.getMetaTagContent('og:title'),
                description: this.description || this.getMetaTagContent('og:description'),
                image: this.image || this.getMetaTagContent('og:image'),
                via: this.shareService.twitterAccount,
                tags: this.tags,
            } : {
                url: this.url,
                title: this.title,
                description: this.description,
                image: this.image,
                tags: this.tags,
                via: this.shareService.twitterAccount,
            };
            // Share the link
            // @ts-ignore
            of({
                el: this.el.nativeElement,
                renderer: this.renderer,
                prop: this.prop,
                cd: this.cd,
                document: this.document,
                platform: this.getPlatform(),
                metaTags
            }).pipe(...this.prop.share.operators, tap((sharerURL) => this.share(sharerURL)), take(1)).subscribe();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.platform.isBrowser) {
            if (changes['shareButton'] && (changes['shareButton'].firstChange || changes['shareButton'].previousValue !== this.shareButton)) {
                this.createShareButton(this.shareButton);
            }
            if (!this.url || (changes['url'] && changes['url'].previousValue !== this.url)) {
                this.url = getValidUrl(this.autoSetMeta
                    ? this.url || this.getMetaTagContent('og:url')
                    : this.url, this.document.defaultView.location.href);
                if (this.getCount && this.prop.count) {
                    this.shareCount(this.url).subscribe((count) => this.count.emit(count));
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._shareWindowClosed.unsubscribe();
    }
    /**
     * Open sharing dialog
     * @param {?} url - Share URL
     * @return {?}
     */
    share(url) {
        if (url) {
            // GA Tracking
            if (this.shareService.gaTracking && ((/** @type {?} */ (this.document.defaultView))).ga) {
                ((/** @type {?} */ (this.document.defaultView))).ga('send', 'social', this.prop.type, 'click', this.url);
            }
            // Open share pop up and activate its opened and closed events
            this._shareWindowClosed = of(this.document.defaultView.open(url, 'newwindow', this.shareService.windowSize)).pipe(tap(() => this.opened.emit(this.prop.type)), switchMap((popUp) => interval(200).pipe(takeWhile(() => !popUp.closed))), finalize(() => this.closed.emit(this.prop.type))).subscribe();
        }
    }
    /**
     * @param {?} shareUrl
     * @return {?}
     */
    shareCount(shareUrl) {
        /** @type {?} */
        const options = this.prop.count;
        return options.request === 'jsonp'
            ?
                // @ts-ignore
                this.http.jsonp(options.url + shareUrl, 'callback').pipe(...options.operators, catchError(() => EMPTY))
            :
                // @ts-ignore
                this.http.get(options.url + shareUrl, options.args).pipe(...options.operators, catchError(() => EMPTY));
    }
    /**
     * @param {?} buttonsName
     * @return {?}
     */
    createShareButton(buttonsName) {
        /** @type {?} */
        const button = Object.assign({}, this.shareService.prop[buttonsName]);
        if (button) {
            // Set share button properties
            this.prop = button;
            // Remove previous button class
            this.renderer.removeClass(this.el.nativeElement, `sb-${this._buttonClass}`);
            // Add new button class
            this.renderer.addClass(this.el.nativeElement, `sb-${button.type}`);
            // Set button css color variable
            this.el.nativeElement.style.setProperty('--button-color', this.prop.color);
            // Keep a copy of the class for future replacement
            this._buttonClass = button.type;
            // Set aria-label attribute
            this.renderer.setAttribute(this.el.nativeElement, 'aria-label', button.ariaLabel || button.text);
        }
        else {
            throw new Error(`[ShareButtons]: The share button '${buttonsName}' does not exist!`);
        }
    }
    /**
     * Get meta tag content
     * @param {?} key
     * @return {?}
     */
    getMetaTagContent(key) {
        /** @type {?} */
        const metaUsingProperty = this.meta.getTag(`property="${key}"`);
        if (metaUsingProperty)
            return metaUsingProperty.getAttribute('content');
        /** @type {?} */
        const metaUsingName = this.meta.getTag(`name="${key}"`);
        if (metaUsingName)
            return metaUsingName.getAttribute('content');
    }
    /**
     * @return {?}
     */
    getPlatform() {
        if (this.platform.IOS)
            return 'ois';
        if (this.platform.ANDROID)
            return 'android';
        return 'desktop';
    }
}
ShareDirective.decorators = [
    { type: Directive, args: [{
                selector: '[shareButton], [share-button]'
            },] }
];
/** @nocollapse */
ShareDirective.ctorParameters = () => [
    { type: Meta },
    { type: ElementRef },
    { type: HttpClient },
    { type: Platform },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: ShareService },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
ShareDirective.propDecorators = {
    shareButton: [{ type: Input }],
    getCount: [{ type: Input }],
    autoSetMeta: [{ type: Input }],
    url: [{ type: Input }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    image: [{ type: Input }],
    tags: [{ type: Input }],
    count: [{ type: Output }],
    opened: [{ type: Output }],
    closed: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class ShareCountPipe {
    /**
     * @param {?} num
     * @param {?=} digits
     * @return {?}
     */
    transform(num, digits) {
        return shareCountFormatter(num, digits);
    }
}
ShareCountPipe.decorators = [
    { type: Pipe, args: [{
                name: 'shareCount'
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class ShareModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: ShareModule,
            providers: [
                { provide: CONFIG, useValue: config }
            ]
        };
    }
}
ShareModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    PlatformModule
                ],
                declarations: [
                    ShareDirective,
                    ShareCountPipe
                ],
                exports: [
                    ShareDirective,
                    ShareCountPipe
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { ShareModule, ShareService, ShareDirective, metaTagsOperators, printOperators, copyOperators, urlInMessageOperators, FacebookCountOperators, PinterestCountOperators, TumblrCountOperators, shareButtonsProp, CONFIG, ShareCountPipe };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,