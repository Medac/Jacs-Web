(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common'), require('@angular/common/http'), require('@angular/platform-browser'), require('@angular/cdk/platform')) :
    typeof define === 'function' && define.amd ? define('@ngx-share/core', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common', '@angular/common/http', '@angular/platform-browser', '@angular/cdk/platform'], factory) :
    (factory((global['ngx-share'] = global['ngx-share'] || {}, global['ngx-share'].core = {}),global.ng.core,global.rxjs,global.rxjs.operators,global.ng.common,global.ng.common.http,global.ng.platformBrowser,global.ng.cdk.platform));
}(this, (function (exports,i0,rxjs,operators,common,http,platformBrowser,platform) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CONFIG = new i0.InjectionToken('SHARE_BUTTONS_CONFIG');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /**
     * Simple object check.
     * @param {?} item
     * @return {?}
     */
    function isObject(item) {
        return (item && typeof item === 'object' && !Array.isArray(item));
    }
    /**
     * Deep merge two objects.
     * @param {?} target
     * @param {...?} sources
     * @return {?}
     */
    function mergeDeep(target) {
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        var _a, _b;
        if (!sources.length) {
            return target;
        }
        /** @type {?} */
        var source = sources.shift();
        if (isObject(target) && isObject(source)) {
            for (var key in source) {
                if (isObject(source[key])) {
                    if (!target[key]) {
                        Object.assign(target, (_a = {}, _a[key] = {}, _a));
                    }
                    mergeDeep(target[key], source[key]);
                }
                else {
                    Object.assign(target, (_b = {}, _b[key] = source[key], _b));
                }
            }
        }
        return mergeDeep.apply(void 0, __spread([target], sources));
    }
    /**
     * Returns a readable number from share count
     * @param {?} num
     * @param {?} digits
     * @return {?}
     */
    function shareCountFormatter(num, digits) {
        /** @type {?} */
        var si = [
            { value: 1E9, symbol: 'B' },
            { value: 1E6, symbol: 'M' },
            { value: 1E3, symbol: 'K' }
        ];
        /** @type {?} */
        var rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
        for (var i = 0; i < si.length; i++) {
            if (num >= si[i].value) {
                return (num / si[i].value).toFixed(digits).replace(rx, '$1') + si[i].symbol;
            }
        }
        return num.toFixed(digits).replace(rx, '$1');
    }
    /**
     * Copy text to clipboard
     * @param {?} ref
     * @return {?}
     */
    function copyToClipboard(ref) {
        return rxjs.of(ref.metaTags.url).pipe(operators.tap(function (url) {
            // Create a hidden TextArea element
            /** @type {?} */
            var textArea = ( /** @type {?} */(ref.document.createElement('textarea')));
            textArea.value = url;
            ref.document.body.appendChild(textArea);
            // highlight TextArea to copy the text
            if (ref.platform === 'ios') {
                /** @type {?} */
                var range = ref.document.createRange();
                range.selectNodeContents(textArea);
                /** @type {?} */
                var selection = ref.document.defaultView.getSelection();
                selection.removeAllRanges();
                selection.addRange(range);
                textArea.readOnly = true;
                textArea.setSelectionRange(0, 999999);
            }
            else {
                textArea.select();
            }
            ref.document.execCommand('copy');
            ref.document.body.removeChild(textArea);
        }));
    }
    /**
     * Returns a valid URL or falls back to current URL
     * @param {?} url
     * @param {?} fallbackUrl
     * @return {?}
     */
    function getValidUrl(url, fallbackUrl) {
        if (url) {
            /** @type {?} */
            var r = /(http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
            if (r.test(url))
                return url;
            console.warn("[ShareButtons]: Sharing link '" + url + "' is invalid!");
        }
        return fallbackUrl;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /**
     * Meta tags operator - Serialize meta tags into the sharer URL
     * @type {?}
     */
    var metaTagsOperators = [
        operators.map(function (ref) {
            // Social network sharer URL */
            /** @type {?} */
            var SharerURL = ref.prop.share[ref.platform];
            if (SharerURL) {
                // object contains supported meta tags
                /** @type {?} */
                var metaTags = ref.prop.share.metaTags;
                // object contains meta tags values */
                /** @type {?} */
                var metaTagsValues_1 = ref.metaTags;
                /** @type {?} */
                var link = '';
                // Set each meta tag with user value
                if (metaTags) {
                    link = Object.entries(metaTags).map(function (_a) {
                        var _b = __read(_a, 2), key = _b[0], metaTag = _b[1];
                        return metaTagsValues_1[key] ? metaTag + "=" + encodeURIComponent(metaTagsValues_1[key]) : '';
                    }).join('&');
                }
                return SharerURL + link;
            }
            return;
        })
    ];
    /**
     * Print button operator
     * @type {?}
     */
    var printOperators = [
        operators.map(function (ref) { return ref.document.defaultView.print(); })
    ];
    /**
     * Copy link to clipboard, used for copy button
     * @type {?}
     */
    var copyOperators = [
        operators.map(function (ref) {
            // Disable the button
            ref.renderer.setStyle(ref.el, 'pointer-events', 'none');
            ref.temp = { text: ref.prop.text, icon: ref.prop.icon };
            ref.metaTags.url = decodeURIComponent(ref.metaTags.url);
            return ref;
        }),
        operators.switchMap(function (ref) {
            return copyToClipboard(ref).pipe(operators.map(function () {
                ref.prop.text = ref.prop.successText;
                ref.prop.icon = ref.prop.successIcon;
                return ref;
            }), operators.catchError(function () {
                ref.prop.text = ref.prop.failText;
                ref.prop.icon = ref.prop.failIcon;
                return rxjs.of(ref);
            }));
        }),
        operators.map(function (ref) {
            ref.cd.markForCheck();
            return ref;
        }),
        operators.delay(2000),
        operators.map(function (ref) {
            // Enable the button
            ref.renderer.setStyle(ref.el, 'pointer-events', 'auto');
            // Reset copy button text and icon */
            ref.prop.text = ref.temp.text;
            ref.prop.icon = ref.temp.icon;
            ref.cd.markForCheck();
        })
    ];
    /**
     * Add the share URL to message body, used for WhatsApp and Email buttons
     * @type {?}
     */
    var urlInMessageOperators = [
        operators.map(function (ref) {
            /** @type {?} */
            var description = ref.metaTags.description;
            /** @type {?} */
            var url = ref.metaTags.url;
            /** @type {?} */
            var newRef = {
                metaTags: {
                    description: description ? description + "\r\n" + url : url
                }
            };
            return mergeDeep(ref, newRef);
        })
    ];
    /** @type {?} */
    var FacebookCountOperators = [
        operators.map(function (res) { return +res.share.share_count; })
    ];
    /** @type {?} */
    var PinterestCountOperators = [
        operators.map(function (text) { return JSON.parse(text.replace(/^receiveCount\((.*)\)/, '$1')); }),
        operators.map(function (res) { return +res.count; })
    ];
    /** @type {?} */
    var TumblrCountOperators = [
        operators.map(function (res) { return +res.response.note_count; })
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    /** @type {?} */
    var shareButtonsProp = {
        facebook: {
            type: 'facebook',
            text: 'Facebook',
            icon: ['fab', 'facebook-f'],
            color: '#4267B2',
            share: {
                desktop: 'https://www.facebook.com/sharer/sharer.php?',
                android: 'https://www.facebook.com/sharer/sharer.php?',
                ios: 'https://www.facebook.com/sharer/sharer.php?',
                operators: metaTagsOperators,
                metaTags: {
                    url: 'u'
                }
            },
            count: {
                request: 'http',
                url: 'https://graph.facebook.com?id=',
                operators: FacebookCountOperators
            }
        },
        twitter: {
            type: 'twitter',
            text: 'Twitter',
            icon: ['fab', 'twitter'],
            color: '#00acee',
            share: {
                desktop: 'https://twitter.com/intent/tweet?',
                android: 'https://twitter.com/intent/tweet?',
                ios: 'https://twitter.com/intent/tweet?',
                operators: metaTagsOperators,
                metaTags: {
                    url: 'url',
                    description: 'text',
                    tags: 'hashtags',
                    via: 'via'
                }
            }
        },
        google: {
            type: 'google',
            text: 'Google+',
            icon: ['fab', 'google-plus-g'],
            color: '#DB4437',
            share: {
                desktop: 'https://plus.google.com/share?',
                android: 'https://plus.google.com/share?',
                ios: 'https://plus.google.com/share?',
                metaTags: {
                    url: 'url',
                },
                operators: metaTagsOperators
            }
        },
        linkedin: {
            type: 'linkedin',
            text: 'LinkedIn',
            icon: ['fab', 'linkedin-in'],
            color: '#006fa6',
            share: {
                desktop: 'http://www.linkedin.com/shareArticle?',
                android: 'http://www.linkedin.com/shareArticle?',
                ios: 'http://www.linkedin.com/shareArticle?',
                operators: metaTagsOperators,
                metaTags: {
                    url: 'url',
                    title: 'title',
                    description: 'summary'
                },
            }
        },
        pinterest: {
            type: 'pinterest',
            text: 'Pinterest',
            icon: ['fab', 'pinterest-p'],
            color: '#BD091D',
            share: {
                desktop: 'https://in.pinterest.com/pin/create/button/?',
                android: 'https://in.pinterest.com/pin/create/button/?',
                ios: 'https://in.pinterest.com/pin/create/button/?',
                operators: metaTagsOperators,
                metaTags: {
                    url: 'url',
                    description: 'description',
                    image: 'media'
                }
            },
            count: {
                request: 'http',
                url: 'https://api.pinterest.com/v1/urls/count.json?url=',
                args: { responseType: 'text' },
                operators: PinterestCountOperators
            }
        },
        reddit: {
            type: 'reddit',
            text: 'Reddit',
            icon: ['fab', 'reddit-alien'],
            color: '#FF4006',
            share: {
                desktop: 'http://www.reddit.com/submit?',
                android: 'http://www.reddit.com/submit?',
                ios: 'http://www.reddit.com/submit?',
                operators: metaTagsOperators,
                metaTags: {
                    url: 'url',
                    title: 'title'
                },
            }
        },
        tumblr: {
            type: 'tumblr',
            text: 'Tumblr',
            icon: ['fab', 'tumblr'],
            color: '#36465D',
            share: {
                desktop: 'http://tumblr.com/widgets/share/tool?',
                android: 'http://tumblr.com/widgets/share/tool?',
                ios: 'http://tumblr.com/widgets/share/tool?',
                operators: metaTagsOperators,
                metaTags: {
                    url: 'canonicalUrl',
                    description: 'caption',
                    tags: 'tags'
                }
            },
            count: {
                request: 'jsonp',
                url: 'https://api.tumblr.com/v2/share/stats?url=',
                operators: TumblrCountOperators
            }
        },
        whatsapp: {
            type: 'whatsapp',
            text: 'WhatsApp',
            icon: ['fab', 'whatsapp'],
            color: '#25D366',
            share: {
                desktop: 'https://web.whatsapp.com/send?',
                android: 'whatsapp://send?',
                ios: 'whatsapp://send?',
                operators: __spread(urlInMessageOperators, metaTagsOperators),
                metaTags: {
                    description: 'text'
                }
            }
        },
        messenger: {
            type: 'messenger',
            text: 'Messenger',
            icon: ['fab', 'facebook-messenger'],
            color: '#0080FF',
            share: {
                android: 'fb-messenger://share/?',
                ios: 'fb-messenger://share/?',
                operators: metaTagsOperators,
                metaTags: {
                    url: 'link'
                }
            }
        },
        telegram: {
            type: 'telegram',
            text: 'Telegram',
            icon: ['fab', 'telegram-plane'],
            color: '#0088cc',
            share: {
                desktop: 'https://t.me/share/url?',
                android: 'https://t.me/share/url?',
                ios: 'https://t.me/share/url?',
                operators: metaTagsOperators,
                metaTags: {
                    url: 'url',
                    description: 'text'
                }
            }
        },
        vk: {
            type: 'vk',
            text: 'VKontakte',
            icon: ['fab', 'vk'],
            color: '#4C75A3',
            share: {
                desktop: 'http://vk.com/share.php?',
                android: 'http://vk.com/share.php?',
                ios: 'http://vk.com/share.php?',
                operators: metaTagsOperators,
                metaTags: {
                    url: 'url'
                }
            }
        },
        stumble: {
            type: 'stumble',
            text: 'Stumble',
            icon: ['fab', 'stumbleupon'],
            color: '#eb4924',
            share: {
                desktop: 'http://www.stumbleupon.com/submit?',
                android: 'http://www.stumbleupon.com/submit?',
                ios: 'http://www.stumbleupon.com/submit?',
                operators: metaTagsOperators,
                metaTags: {
                    url: 'url'
                }
            }
        },
        xing: {
            type: 'xing',
            text: 'Xing',
            icon: ['fab', 'xing'],
            color: '#006567',
            share: {
                desktop: 'https://www.xing.com/app/user?op=share&',
                android: 'https://www.xing.com/app/user?op=share&',
                ios: 'https://www.xing.com/app/user?op=share&',
                operators: metaTagsOperators,
                metaTags: {
                    url: 'url'
                }
            }
        },
        sms: {
            type: 'sms',
            text: 'SMS',
            icon: 'comment-alt',
            color: '#20c16c',
            share: {
                desktop: 'sms:?',
                android: 'sms:?',
                ios: 'sms:&',
                metaTags: {
                    description: 'body'
                },
                operators: __spread(urlInMessageOperators, metaTagsOperators)
            }
        },
        email: {
            type: 'email',
            text: 'Email',
            icon: 'envelope',
            color: '#FF961C',
            share: {
                desktop: 'mailto:?',
                android: 'mailto:?',
                ios: 'mailto:?',
                operators: __spread(urlInMessageOperators, metaTagsOperators),
                metaTags: {
                    title: 'subject',
                    description: 'body'
                }
            }
        },
        copy: {
            type: 'copy',
            text: 'Copy link',
            successText: 'Copied',
            successIcon: 'check',
            failText: 'Error',
            failIcon: 'exclamation',
            icon: 'link',
            color: '#607D8B',
            share: {
                operators: copyOperators
            }
        },
        print: {
            type: 'print',
            text: 'Print',
            icon: 'print',
            color: '#765AA2',
            share: {
                operators: printOperators
            }
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var ShareService = /** @class */ (function () {
        function ShareService(config) {
            this.config = {
                prop: shareButtonsProp,
                options: {
                    theme: 'default',
                    include: [],
                    exclude: [],
                    size: 0,
                    url: null,
                    title: null,
                    description: null,
                    image: null,
                    tags: null,
                    twitterAccount: null,
                    autoSetMeta: true,
                    gaTracking: false,
                    windowWidth: 800,
                    windowHeight: 500,
                    moreButtonIcon: 'ellipsis-h',
                    lessButtonIcon: 'minus'
                }
            };
            this.config$ = new rxjs.BehaviorSubject(this.config);
            this.setConfig(config);
        }
        Object.defineProperty(ShareService.prototype, "prop", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.prop;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShareService.prototype, "twitterAccount", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.options.twitterAccount;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShareService.prototype, "theme", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.options.theme;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShareService.prototype, "windowSize", {
            get: /**
             * @return {?}
             */ function () {
                return "width=" + this.config.options.windowWidth + ", height=" + this.config.options.windowHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShareService.prototype, "url", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.options.url;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShareService.prototype, "title", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.options.title;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShareService.prototype, "description", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.options.description;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShareService.prototype, "image", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.options.image;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShareService.prototype, "tags", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.options.tags;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShareService.prototype, "autoSetMeta", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.options.autoSetMeta;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShareService.prototype, "gaTracking", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.options.gaTracking;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ShareService.prototype, "size", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.options.size;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} config
         * @return {?}
         */
        ShareService.prototype.setConfig = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                if (config) {
                    this.config = mergeDeep(this.config, config);
                    this.config$.next(this.config);
                }
            };
        /**
         * @param {?} name
         * @param {?} data
         * @return {?}
         */
        ShareService.prototype.addButton = /**
         * @param {?} name
         * @param {?} data
         * @return {?}
         */
            function (name, data) {
                var _a;
                /** @type {?} */
                var config = {
                    prop: __assign({}, shareButtonsProp, (_a = {}, _a[name] = data, _a))
                };
                this.setConfig(config);
            };
        ShareService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ShareService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [CONFIG,] }] }
            ];
        };
        /** @nocollapse */ ShareService.ngInjectableDef = i0.defineInjectable({ factory: function ShareService_Factory() { return new ShareService(i0.inject(CONFIG, 8)); }, token: ShareService, providedIn: "root" });
        return ShareService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var ShareDirective = /** @class */ (function () {
        function ShareDirective(meta, el, http$$1, platform$$1, renderer, cd, shareService, document) {
            this.meta = meta;
            this.el = el;
            this.http = http$$1;
            this.platform = platform$$1;
            this.renderer = renderer;
            this.cd = cd;
            this.shareService = shareService;
            this.document = document;
            /**
             * share window closed subscription (to unsubscribe if the button is destroyed before the share window closes)
             */
            this._shareWindowClosed = rxjs.Subscription.EMPTY;
            /**
             * Get share count
             */
            this.getCount = false;
            /**
             * Set meta tags from document head, useful when SEO is supported
             */
            this.autoSetMeta = this.shareService.autoSetMeta;
            /**
             * Meta tags inputs - initialized from the global options
             */
            this.url = this.shareService.url;
            this.title = this.shareService.title;
            this.description = this.shareService.description;
            this.image = this.shareService.image;
            this.tags = this.shareService.tags;
            /**
             * Stream that emits when share count is fetched
             */
            this.count = new i0.EventEmitter();
            /**
             * Stream that emits when share dialog is opened
             */
            this.opened = new i0.EventEmitter();
            /**
             * Stream that emits when share dialog is closed
             */
            this.closed = new i0.EventEmitter();
        }
        /** Share link on element click */
        /**
         * Share link on element click
         * @return {?}
         */
        ShareDirective.prototype.onClick = /**
         * Share link on element click
         * @return {?}
         */
            function () {
                var _this = this;
                var _a;
                if (this.platform.isBrowser) {
                    /** @type {?} */
                    var metaTags = this.autoSetMeta ? {
                        url: this.url,
                        title: this.title || this.getMetaTagContent('og:title'),
                        description: this.description || this.getMetaTagContent('og:description'),
                        image: this.image || this.getMetaTagContent('og:image'),
                        via: this.shareService.twitterAccount,
                        tags: this.tags,
                    } : {
                        url: this.url,
                        title: this.title,
                        description: this.description,
                        image: this.image,
                        tags: this.tags,
                        via: this.shareService.twitterAccount,
                    };
                    // Share the link
                    // @ts-ignore
                    (_a = rxjs.of({
                        el: this.el.nativeElement,
                        renderer: this.renderer,
                        prop: this.prop,
                        cd: this.cd,
                        document: this.document,
                        platform: this.getPlatform(),
                        metaTags: metaTags
                    })).pipe.apply(_a, __spread(this.prop.share.operators, [operators.tap(function (sharerURL) { return _this.share(sharerURL); }),
                        operators.take(1)])).subscribe();
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        ShareDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                if (this.platform.isBrowser) {
                    if (changes['shareButton'] && (changes['shareButton'].firstChange || changes['shareButton'].previousValue !== this.shareButton)) {
                        this.createShareButton(this.shareButton);
                    }
                    if (!this.url || (changes['url'] && changes['url'].previousValue !== this.url)) {
                        this.url = getValidUrl(this.autoSetMeta
                            ? this.url || this.getMetaTagContent('og:url')
                            : this.url, this.document.defaultView.location.href);
                        if (this.getCount && this.prop.count) {
                            this.shareCount(this.url).subscribe(function (count) { return _this.count.emit(count); });
                        }
                    }
                }
            };
        /**
         * @return {?}
         */
        ShareDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._shareWindowClosed.unsubscribe();
            };
        /**
         * Open sharing dialog
         * @param url - Share URL
         */
        /**
         * Open sharing dialog
         * @param {?} url - Share URL
         * @return {?}
         */
        ShareDirective.prototype.share = /**
         * Open sharing dialog
         * @param {?} url - Share URL
         * @return {?}
         */
            function (url) {
                var _this = this;
                if (url) {
                    // GA Tracking
                    if (this.shareService.gaTracking && (( /** @type {?} */(this.document.defaultView))).ga) {
                        (( /** @type {?} */(this.document.defaultView))).ga('send', 'social', this.prop.type, 'click', this.url);
                    }
                    // Open share pop up and activate its opened and closed events
                    this._shareWindowClosed = rxjs.of(this.document.defaultView.open(url, 'newwindow', this.shareService.windowSize)).pipe(operators.tap(function () { return _this.opened.emit(_this.prop.type); }), operators.switchMap(function (popUp) { return rxjs.interval(200).pipe(operators.takeWhile(function () { return !popUp.closed; })); }), operators.finalize(function () { return _this.closed.emit(_this.prop.type); })).subscribe();
                }
            };
        /**
         * @param {?} shareUrl
         * @return {?}
         */
        ShareDirective.prototype.shareCount = /**
         * @param {?} shareUrl
         * @return {?}
         */
            function (shareUrl) {
                var _a, _b;
                /** @type {?} */
                var options = this.prop.count;
                return options.request === 'jsonp'
                    ?
                        // @ts-ignore
                        (_a = this.http.jsonp(options.url + shareUrl, 'callback')).pipe.apply(_a, __spread(options.operators, [operators.catchError(function () { return rxjs.EMPTY; })])) :
                    // @ts-ignore
                    (_b = this.http.get(options.url + shareUrl, options.args)).pipe.apply(_b, __spread(options.operators, [operators.catchError(function () { return rxjs.EMPTY; })]));
            };
        /**
         * @param {?} buttonsName
         * @return {?}
         */
        ShareDirective.prototype.createShareButton = /**
         * @param {?} buttonsName
         * @return {?}
         */
            function (buttonsName) {
                /** @type {?} */
                var button = __assign({}, this.shareService.prop[buttonsName]);
                if (button) {
                    // Set share button properties
                    this.prop = button;
                    // Remove previous button class
                    this.renderer.removeClass(this.el.nativeElement, "sb-" + this._buttonClass);
                    // Add new button class
                    this.renderer.addClass(this.el.nativeElement, "sb-" + button.type);
                    // Set button css color variable
                    this.el.nativeElement.style.setProperty('--button-color', this.prop.color);
                    // Keep a copy of the class for future replacement
                    this._buttonClass = button.type;
                    // Set aria-label attribute
                    this.renderer.setAttribute(this.el.nativeElement, 'aria-label', button.ariaLabel || button.text);
                }
                else {
                    throw new Error("[ShareButtons]: The share button '" + buttonsName + "' does not exist!");
                }
            };
        /** Get meta tag content */
        /**
         * Get meta tag content
         * @param {?} key
         * @return {?}
         */
        ShareDirective.prototype.getMetaTagContent = /**
         * Get meta tag content
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var metaUsingProperty = this.meta.getTag("property=\"" + key + "\"");
                if (metaUsingProperty)
                    return metaUsingProperty.getAttribute('content');
                /** @type {?} */
                var metaUsingName = this.meta.getTag("name=\"" + key + "\"");
                if (metaUsingName)
                    return metaUsingName.getAttribute('content');
            };
        /**
         * @return {?}
         */
        ShareDirective.prototype.getPlatform = /**
         * @return {?}
         */
            function () {
                if (this.platform.IOS)
                    return 'ois';
                if (this.platform.ANDROID)
                    return 'android';
                return 'desktop';
            };
        ShareDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[shareButton], [share-button]'
                    },] }
        ];
        /** @nocollapse */
        ShareDirective.ctorParameters = function () {
            return [
                { type: platformBrowser.Meta },
                { type: i0.ElementRef },
                { type: http.HttpClient },
                { type: platform.Platform },
                { type: i0.Renderer2 },
                { type: i0.ChangeDetectorRef },
                { type: ShareService },
                { type: undefined, decorators: [{ type: i0.Inject, args: [common.DOCUMENT,] }] }
            ];
        };
        ShareDirective.propDecorators = {
            shareButton: [{ type: i0.Input }],
            getCount: [{ type: i0.Input }],
            autoSetMeta: [{ type: i0.Input }],
            url: [{ type: i0.Input }],
            title: [{ type: i0.Input }],
            description: [{ type: i0.Input }],
            image: [{ type: i0.Input }],
            tags: [{ type: i0.Input }],
            count: [{ type: i0.Output }],
            opened: [{ type: i0.Output }],
            closed: [{ type: i0.Output }],
            onClick: [{ type: i0.HostListener, args: ['click',] }]
        };
        return ShareDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var ShareCountPipe = /** @class */ (function () {
        function ShareCountPipe() {
        }
        /**
         * @param {?} num
         * @param {?=} digits
         * @return {?}
         */
        ShareCountPipe.prototype.transform = /**
         * @param {?} num
         * @param {?=} digits
         * @return {?}
         */
            function (num, digits) {
                return shareCountFormatter(num, digits);
            };
        ShareCountPipe.decorators = [
            { type: i0.Pipe, args: [{
                        name: 'shareCount'
                    },] }
        ];
        return ShareCountPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var ShareModule = /** @class */ (function () {
        function ShareModule() {
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        ShareModule.forRoot = /**
         * @param {?=} config
         * @return {?}
         */
            function (config) {
                return {
                    ngModule: ShareModule,
                    providers: [
                        { provide: CONFIG, useValue: config }
                    ]
                };
            };
        ShareModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            platform.PlatformModule
                        ],
                        declarations: [
                            ShareDirective,
                            ShareCountPipe
                        ],
                        exports: [
                            ShareDirective,
                            ShareCountPipe
                        ]
                    },] }
        ];
        return ShareModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.ShareModule = ShareModule;
    exports.ShareService = ShareService;
    exports.ShareDirective = ShareDirective;
    exports.metaTagsOperators = metaTagsOperators;
    exports.printOperators = printOperators;
    exports.copyOperators = copyOperators;
    exports.urlInMessageOperators = urlInMessageOperators;
    exports.FacebookCountOperators = FacebookCountOperators;
    exports.PinterestCountOperators = PinterestCountOperators;
    exports.TumblrCountOperators = TumblrCountOperators;
    exports.shareButtonsProp = shareButtonsProp;
    exports.CONFIG = CONFIG;
    exports.ShareCountPipe = ShareCountPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNoYXJlLWNvcmUudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm5nOi8vQG5neC1zaGFyZS9jb3JlL2xpYi9zaGFyZS5tb2RlbHMudHMiLCJuZzovL0BuZ3gtc2hhcmUvY29yZS9saWIvdXRpbHMudHMiLCJuZzovL0BuZ3gtc2hhcmUvY29yZS9saWIvc2hhcmUub3BlcmF0b3JzLnRzIiwibmc6Ly9Abmd4LXNoYXJlL2NvcmUvbGliL3NoYXJlLnByb3AudHMiLCJuZzovL0BuZ3gtc2hhcmUvY29yZS9saWIvc2hhcmUuc2VydmljZS50cyIsIm5nOi8vQG5neC1zaGFyZS9jb3JlL2xpYi9zaGFyZS1idXR0b24uZGlyZWN0aXZlLnRzIiwibmc6Ly9Abmd4LXNoYXJlL2NvcmUvbGliL3NoYXJlLWNvdW50LnBpcGUudHMiLCJuZzovL0BuZ3gtc2hhcmUvY29yZS9saWIvc2hhcmUubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMClcclxuICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTtcclxuICAgIHJlc3VsdC5kZWZhdWx0ID0gbW9kO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIENoYW5nZURldGVjdG9yUmVmLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT3BlcmF0b3JGdW5jdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IENPTkZJRyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxTaGFyZUJ1dHRvbnNDb25maWc+KCdTSEFSRV9CVVRUT05TX0NPTkZJRycpO1xyXG4vKipcclxuICogU2hhcmUgYnV0dG9ucyBnbG9iYWwgY29uZmlnXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFNoYXJlQnV0dG9uc0NvbmZpZyB7XHJcbiAgb3B0aW9ucz86IFNoYXJlQnV0dG9uc09wdGlvbnM7XHJcbiAgcHJvcD86IElTaGFyZUJ1dHRvbnMgfCBhbnk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTaGFyZSBidXR0b25zIGdsb2JhbCBvcHRpb25zXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFNoYXJlQnV0dG9uc09wdGlvbnMge1xyXG4gIHRoZW1lPzogc3RyaW5nO1xyXG4gIGluY2x1ZGU/OiBzdHJpbmdbXTtcclxuICBleGNsdWRlPzogc3RyaW5nW107XHJcbiAgc2l6ZT86IG51bWJlcjtcclxuICB1cmw/OiBzdHJpbmc7XHJcbiAgdGl0bGU/OiBzdHJpbmc7XHJcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XHJcbiAgaW1hZ2U/OiBzdHJpbmc7XHJcbiAgdGFncz86IHN0cmluZztcclxuICB0d2l0dGVyQWNjb3VudD86IHN0cmluZztcclxuICBhdXRvU2V0TWV0YT86IGJvb2xlYW47XHJcbiAgZ2FUcmFja2luZz86IGJvb2xlYW47XHJcbiAgd2luZG93V2lkdGg/OiBudW1iZXI7XHJcbiAgd2luZG93SGVpZ2h0PzogbnVtYmVyO1xyXG4gIG1vcmVCdXR0b25JY29uPzogYW55O1xyXG4gIGxlc3NCdXR0b25JY29uPzogYW55O1xyXG59XHJcblxyXG4vKipcclxuICogU2hhcmUgYnV0dG9ucyBjb2xsZWN0aW9uXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElTaGFyZUJ1dHRvbnMge1xyXG4gIGZhY2Vib29rPzogSVNoYXJlQnV0dG9uO1xyXG4gIHR3aXR0ZXI/OiBJU2hhcmVCdXR0b247XHJcbiAgbGlua2VkaW4/OiBJU2hhcmVCdXR0b247XHJcbiAgZ29vZ2xlPzogSVNoYXJlQnV0dG9uO1xyXG4gIHR1bWJscj86IElTaGFyZUJ1dHRvbjtcclxuICBzdHVtYmxlPzogSVNoYXJlQnV0dG9uO1xyXG4gIHBpbnRlcmVzdD86IElTaGFyZUJ1dHRvbjtcclxuICByZWRkaXQ/OiBJU2hhcmVCdXR0b247XHJcbiAgdms/OiBJU2hhcmVCdXR0b247XHJcbiAgdGVsZWdyYW0/OiBJU2hhcmVCdXR0b247XHJcbiAgbWVzc2VuZ2VyPzogSVNoYXJlQnV0dG9uO1xyXG4gIHdoYXRzYXBwPzogSVNoYXJlQnV0dG9uO1xyXG4gIHhpbmc/OiBJU2hhcmVCdXR0b247XHJcbiAgc21zPzogSVNoYXJlQnV0dG9uO1xyXG4gIGVtYWlsPzogSVNoYXJlQnV0dG9uO1xyXG4gIHByaW50PzogSVNoYXJlQnV0dG9uO1xyXG4gIGNvcHk/OiBJU2hhcmVCdXR0b247XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTaGFyZSBidXR0b24gcHJvcGVydGllc1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJU2hhcmVCdXR0b24ge1xyXG4gIHRleHQ/OiBzdHJpbmc7XHJcbiAgaWNvbj86IGFueTtcclxuICB0eXBlPzogc3RyaW5nO1xyXG4gIGNvbG9yPzogc3RyaW5nO1xyXG4gIGFyaWFMYWJlbD86IHN0cmluZztcclxuICBzdWNjZXNzVGV4dD86IHN0cmluZztcclxuICBzdWNjZXNzSWNvbj86IGFueTtcclxuICBmYWlsVGV4dD86IHN0cmluZztcclxuICBmYWlsSWNvbj86IGFueTtcclxuICBzaGFyZT86IHtcclxuICAgIGRlc2t0b3A/OiBzdHJpbmc7XHJcbiAgICBhbmRyb2lkPzogc3RyaW5nO1xyXG4gICAgaW9zPzogc3RyaW5nO1xyXG4gICAgb3BlcmF0b3JzPzogT3BlcmF0b3JGdW5jdGlvbjxhbnksIGFueT5bXTtcclxuICAgIG1ldGFUYWdzPzogYW55O1xyXG4gIH07XHJcbiAgY291bnQ/OiBJU2hhcmVDb3VudDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJU2hhcmVDb3VudCB7XHJcbiAgcmVxdWVzdD86IHN0cmluZztcclxuICB1cmw/OiBzdHJpbmc7XHJcbiAgYXJncz86IGFueTtcclxuICBvcGVyYXRvcnM/OiBPcGVyYXRvckZ1bmN0aW9uPGFueSwgYW55PltdO1xyXG59XHJcblxyXG4vKipcclxuICogU2hhcmUgYnV0dG9uIGRpcmVjdGl2ZSByZWYgaW50ZXJmYWNlXHJcbiAqIFRoaXMgcmVmIHRvIGJlIHVzZWQgaW4gdGhlIHNoYXJlIG9wZXJhdG9yc1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBTaGFyZUJ1dHRvblJlZiB7XHJcbiAgcHJvcD86IElTaGFyZUJ1dHRvbjtcclxuICByZW5kZXJlcj86IFJlbmRlcmVyMjtcclxuICBjZD86IENoYW5nZURldGVjdG9yUmVmO1xyXG4gIGVsPzogSFRNTEVsZW1lbnQ7XHJcbiAgZG9jdW1lbnQ/OiBhbnk7XHJcbiAgcGxhdGZvcm0/OiBzdHJpbmc7XHJcbiAgdGVtcD86IGFueTtcclxuICBtZXRhVGFnczoge1xyXG4gICAgdXJsPzogc3RyaW5nO1xyXG4gICAgdGl0bGU/OiBzdHJpbmc7XHJcbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcclxuICAgIGltYWdlPzogc3RyaW5nO1xyXG4gICAgdGFncz86IHN0cmluZztcclxuICAgIHZpYT86IHN0cmluZztcclxuICB9O1xyXG59XHJcbiIsImltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgU2hhcmVCdXR0b25SZWYgfSBmcm9tICcuL3NoYXJlLm1vZGVscyc7XHJcblxyXG4vKiogU2ltcGxlIG9iamVjdCBjaGVjay4qL1xyXG5mdW5jdGlvbiBpc09iamVjdChpdGVtKTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuIChpdGVtICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpdGVtKSk7XHJcbn1cclxuXHJcbi8qKiBEZWVwIG1lcmdlIHR3byBvYmplY3RzLiovXHJcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZURlZXAodGFyZ2V0LCAuLi5zb3VyY2VzKSB7XHJcbiAgaWYgKCFzb3VyY2VzLmxlbmd0aCkge1xyXG4gICAgcmV0dXJuIHRhcmdldDtcclxuICB9XHJcbiAgY29uc3Qgc291cmNlID0gc291cmNlcy5zaGlmdCgpO1xyXG5cclxuICBpZiAoaXNPYmplY3QodGFyZ2V0KSAmJiBpc09iamVjdChzb3VyY2UpKSB7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzb3VyY2UpIHtcclxuICAgICAgaWYgKGlzT2JqZWN0KHNvdXJjZVtrZXldKSkge1xyXG4gICAgICAgIGlmICghdGFyZ2V0W2tleV0pIHtcclxuICAgICAgICAgIE9iamVjdC5hc3NpZ24odGFyZ2V0LCB7W2tleV06IHt9fSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1lcmdlRGVlcCh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGFyZ2V0LCB7W2tleV06IHNvdXJjZVtrZXldfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBtZXJnZURlZXAodGFyZ2V0LCAuLi5zb3VyY2VzKTtcclxufVxyXG5cclxuLyoqIFJldHVybnMgYSByZWFkYWJsZSBudW1iZXIgZnJvbSBzaGFyZSBjb3VudCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2hhcmVDb3VudEZvcm1hdHRlcihudW06IG51bWJlciwgZGlnaXRzOiBudW1iZXIpOiBzdHJpbmcge1xyXG5cclxuICBjb25zdCBzaSA9IFtcclxuICAgIHt2YWx1ZTogMUU5LCBzeW1ib2w6ICdCJ30sXHJcbiAgICB7dmFsdWU6IDFFNiwgc3ltYm9sOiAnTSd9LFxyXG4gICAge3ZhbHVlOiAxRTMsIHN5bWJvbDogJ0snfVxyXG4gIF0sIHJ4ID0gL1xcLjArJHwoXFwuWzAtOV0qWzEtOV0pMCskLztcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaS5sZW5ndGg7IGkrKykge1xyXG4gICAgaWYgKG51bSA+PSBzaVtpXS52YWx1ZSkge1xyXG4gICAgICByZXR1cm4gKG51bSAvIHNpW2ldLnZhbHVlKS50b0ZpeGVkKGRpZ2l0cykucmVwbGFjZShyeCwgJyQxJykgKyBzaVtpXS5zeW1ib2w7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBudW0udG9GaXhlZChkaWdpdHMpLnJlcGxhY2UocngsICckMScpO1xyXG59XHJcblxyXG4vKiogQ29weSB0ZXh0IHRvIGNsaXBib2FyZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29weVRvQ2xpcGJvYXJkKHJlZjogU2hhcmVCdXR0b25SZWYpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gIHJldHVybiBvZihyZWYubWV0YVRhZ3MudXJsKS5waXBlKFxyXG4gICAgdGFwKCh1cmw6IHN0cmluZykgPT4ge1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIGEgaGlkZGVuIFRleHRBcmVhIGVsZW1lbnRcclxuICAgICAgY29uc3QgdGV4dEFyZWE6IEhUTUxUZXh0QXJlYUVsZW1lbnQgPSA8SFRNTFRleHRBcmVhRWxlbWVudD5yZWYuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcclxuICAgICAgdGV4dEFyZWEudmFsdWUgPSB1cmw7XHJcbiAgICAgIHJlZi5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRleHRBcmVhKTtcclxuXHJcbiAgICAgIC8vIGhpZ2hsaWdodCBUZXh0QXJlYSB0byBjb3B5IHRoZSB0ZXh0XHJcbiAgICAgIGlmIChyZWYucGxhdGZvcm0gPT09ICdpb3MnKSB7XHJcbiAgICAgICAgY29uc3QgcmFuZ2UgPSByZWYuZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcclxuICAgICAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHModGV4dEFyZWEpO1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHJlZi5kb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcbiAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcclxuICAgICAgICB0ZXh0QXJlYS5yZWFkT25seSA9IHRydWU7XHJcbiAgICAgICAgdGV4dEFyZWEuc2V0U2VsZWN0aW9uUmFuZ2UoMCwgOTk5OTk5KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0ZXh0QXJlYS5zZWxlY3QoKTtcclxuICAgICAgfVxyXG4gICAgICByZWYuZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcclxuICAgICAgcmVmLmRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGV4dEFyZWEpO1xyXG4gICAgfSlcclxuICApO1xyXG59XHJcblxyXG4vKiogUmV0dXJucyBhIHZhbGlkIFVSTCBvciBmYWxscyBiYWNrIHRvIGN1cnJlbnQgVVJMICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWxpZFVybCh1cmw6IHN0cmluZywgZmFsbGJhY2tVcmw6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgaWYgKHVybCkge1xyXG4gICAgY29uc3QgciA9IC8oaHR0cHxodHRwcyk6XFwvXFwvKFxcdys6ezAsMX1cXHcqQCk/KFxcUyspKDpbMC05XSspPyhcXC98XFwvKFtcXHcjITouPys9JiVAIVxcLVxcL10pKT8vO1xyXG4gICAgaWYgKHIudGVzdCh1cmwpKSByZXR1cm4gdXJsO1xyXG4gICAgY29uc29sZS53YXJuKGBbU2hhcmVCdXR0b25zXTogU2hhcmluZyBsaW5rICcke3VybH0nIGlzIGludmFsaWQhYCk7XHJcbiAgfVxyXG4gIHJldHVybiBmYWxsYmFja1VybDtcclxufVxyXG4iLCJpbXBvcnQgeyBvZiwgT3BlcmF0b3JGdW5jdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIGRlbGF5LCBzd2l0Y2hNYXAsIGNhdGNoRXJyb3IsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgU2hhcmVCdXR0b25SZWYgfSBmcm9tICcuL3NoYXJlLm1vZGVscyc7XHJcbmltcG9ydCB7IGNvcHlUb0NsaXBib2FyZCwgbWVyZ2VEZWVwIH0gZnJvbSAnLi91dGlscyc7XHJcblxyXG4vKipcclxuICogTWV0YSB0YWdzIG9wZXJhdG9yIC0gU2VyaWFsaXplIG1ldGEgdGFncyBpbnRvIHRoZSBzaGFyZXIgVVJMXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgbWV0YVRhZ3NPcGVyYXRvcnM6IE9wZXJhdG9yRnVuY3Rpb248YW55LCBhbnk+W10gPSBbXHJcbiAgbWFwKChyZWY6IFNoYXJlQnV0dG9uUmVmKSA9PiB7XHJcblxyXG4gICAgLy8gU29jaWFsIG5ldHdvcmsgc2hhcmVyIFVSTCAqL1xyXG4gICAgY29uc3QgU2hhcmVyVVJMID0gcmVmLnByb3Auc2hhcmVbcmVmLnBsYXRmb3JtXTtcclxuICAgIGlmIChTaGFyZXJVUkwpIHtcclxuXHJcbiAgICAgIC8vIG9iamVjdCBjb250YWlucyBzdXBwb3J0ZWQgbWV0YSB0YWdzXHJcbiAgICAgIGNvbnN0IG1ldGFUYWdzID0gcmVmLnByb3Auc2hhcmUubWV0YVRhZ3M7XHJcblxyXG4gICAgICAvLyBvYmplY3QgY29udGFpbnMgbWV0YSB0YWdzIHZhbHVlcyAqL1xyXG4gICAgICBjb25zdCBtZXRhVGFnc1ZhbHVlcyA9IHJlZi5tZXRhVGFncztcclxuXHJcbiAgICAgIGxldCBsaW5rID0gJyc7XHJcbiAgICAgIC8vIFNldCBlYWNoIG1ldGEgdGFnIHdpdGggdXNlciB2YWx1ZVxyXG4gICAgICBpZiAobWV0YVRhZ3MpIHtcclxuICAgICAgICBsaW5rID0gT2JqZWN0LmVudHJpZXMobWV0YVRhZ3MpLm1hcCgoW2tleSwgbWV0YVRhZ10pID0+XHJcbiAgICAgICAgICBtZXRhVGFnc1ZhbHVlc1trZXldID8gYCR7bWV0YVRhZ309JHtlbmNvZGVVUklDb21wb25lbnQobWV0YVRhZ3NWYWx1ZXNba2V5XSl9YCA6ICcnXHJcbiAgICAgICAgKS5qb2luKCcmJyk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFNoYXJlclVSTCArIGxpbms7XHJcbiAgICB9XHJcbiAgICByZXR1cm47XHJcbiAgfSlcclxuXTtcclxuXHJcbi8qKlxyXG4gKiBQcmludCBidXR0b24gb3BlcmF0b3JcclxuICovXHJcbmV4cG9ydCBjb25zdCBwcmludE9wZXJhdG9yczogT3BlcmF0b3JGdW5jdGlvbjxhbnksIGFueT5bXSA9IFtcclxuICBtYXAoKHJlZjogU2hhcmVCdXR0b25SZWYpID0+IHJlZi5kb2N1bWVudC5kZWZhdWx0Vmlldy5wcmludCgpKVxyXG5dO1xyXG5cclxuLyoqXHJcbiAqIENvcHkgbGluayB0byBjbGlwYm9hcmQsIHVzZWQgZm9yIGNvcHkgYnV0dG9uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgY29weU9wZXJhdG9yczogT3BlcmF0b3JGdW5jdGlvbjxhbnksIGFueT5bXSA9IFtcclxuICBtYXAoKHJlZjogU2hhcmVCdXR0b25SZWYpID0+IHtcclxuXHJcbiAgICAvLyBEaXNhYmxlIHRoZSBidXR0b25cclxuICAgIHJlZi5yZW5kZXJlci5zZXRTdHlsZShyZWYuZWwsICdwb2ludGVyLWV2ZW50cycsICdub25lJyk7XHJcblxyXG4gICAgcmVmLnRlbXAgPSB7dGV4dDogcmVmLnByb3AudGV4dCwgaWNvbjogcmVmLnByb3AuaWNvbn07XHJcbiAgICByZWYubWV0YVRhZ3MudXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KHJlZi5tZXRhVGFncy51cmwpO1xyXG4gICAgcmV0dXJuIHJlZjtcclxuICB9KSxcclxuICBzd2l0Y2hNYXAoKHJlZjogU2hhcmVCdXR0b25SZWYpID0+IGNvcHlUb0NsaXBib2FyZChyZWYpLnBpcGUoXHJcbiAgICBtYXAoKCkgPT4ge1xyXG4gICAgICByZWYucHJvcC50ZXh0ID0gcmVmLnByb3Auc3VjY2Vzc1RleHQ7XHJcbiAgICAgIHJlZi5wcm9wLmljb24gPSByZWYucHJvcC5zdWNjZXNzSWNvbjtcclxuICAgICAgcmV0dXJuIHJlZjtcclxuICAgIH0pLFxyXG4gICAgY2F0Y2hFcnJvcigoKSA9PiB7XHJcbiAgICAgIHJlZi5wcm9wLnRleHQgPSByZWYucHJvcC5mYWlsVGV4dDtcclxuICAgICAgcmVmLnByb3AuaWNvbiA9IHJlZi5wcm9wLmZhaWxJY29uO1xyXG4gICAgICByZXR1cm4gb2YocmVmKTtcclxuICAgIH0pXHJcbiAgKSksXHJcbiAgbWFwKChyZWY6IFNoYXJlQnV0dG9uUmVmKSA9PiB7XHJcbiAgICByZWYuY2QubWFya0ZvckNoZWNrKCk7XHJcbiAgICByZXR1cm4gcmVmO1xyXG4gIH0pLFxyXG4gIGRlbGF5KDIwMDApLFxyXG4gIG1hcCgocmVmOiBTaGFyZUJ1dHRvblJlZikgPT4ge1xyXG5cclxuICAgIC8vIEVuYWJsZSB0aGUgYnV0dG9uXHJcbiAgICByZWYucmVuZGVyZXIuc2V0U3R5bGUocmVmLmVsLCAncG9pbnRlci1ldmVudHMnLCAnYXV0bycpO1xyXG5cclxuICAgIC8vIFJlc2V0IGNvcHkgYnV0dG9uIHRleHQgYW5kIGljb24gKi9cclxuICAgIHJlZi5wcm9wLnRleHQgPSByZWYudGVtcC50ZXh0O1xyXG4gICAgcmVmLnByb3AuaWNvbiA9IHJlZi50ZW1wLmljb247XHJcbiAgICByZWYuY2QubWFya0ZvckNoZWNrKCk7XHJcbiAgfSlcclxuXTtcclxuXHJcbi8qKlxyXG4gKiBBZGQgdGhlIHNoYXJlIFVSTCB0byBtZXNzYWdlIGJvZHksIHVzZWQgZm9yIFdoYXRzQXBwIGFuZCBFbWFpbCBidXR0b25zXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdXJsSW5NZXNzYWdlT3BlcmF0b3JzOiBPcGVyYXRvckZ1bmN0aW9uPGFueSwgYW55PltdID0gW1xyXG4gIG1hcCgocmVmOiBTaGFyZUJ1dHRvblJlZikgPT4ge1xyXG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSByZWYubWV0YVRhZ3MuZGVzY3JpcHRpb247XHJcbiAgICBjb25zdCB1cmwgPSByZWYubWV0YVRhZ3MudXJsO1xyXG4gICAgY29uc3QgbmV3UmVmOiBTaGFyZUJ1dHRvblJlZiA9IHtcclxuICAgICAgbWV0YVRhZ3M6IHtcclxuICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24gPyBgJHtkZXNjcmlwdGlvbn1cXHJcXG4ke3VybH1gIDogdXJsXHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gbWVyZ2VEZWVwKHJlZiwgbmV3UmVmKTtcclxuICB9KVxyXG5dO1xyXG5cclxuZXhwb3J0IGNvbnN0IEZhY2Vib29rQ291bnRPcGVyYXRvcnM6IE9wZXJhdG9yRnVuY3Rpb248YW55LCBhbnk+W10gPSBbXHJcbiAgbWFwKChyZXM6IGFueSkgPT4gK3Jlcy5zaGFyZS5zaGFyZV9jb3VudClcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBQaW50ZXJlc3RDb3VudE9wZXJhdG9yczogT3BlcmF0b3JGdW5jdGlvbjxhbnksIGFueT5bXSA9IFtcclxuICBtYXAoKHRleHQ6IHN0cmluZykgPT4gSlNPTi5wYXJzZSh0ZXh0LnJlcGxhY2UoL15yZWNlaXZlQ291bnRcXCgoLiopXFwpLywgJyQxJykpKSxcclxuICBtYXAoKHJlczogYW55KSA9PiArcmVzLmNvdW50KVxyXG5dO1xyXG5cclxuZXhwb3J0IGNvbnN0IFR1bWJsckNvdW50T3BlcmF0b3JzOiBPcGVyYXRvckZ1bmN0aW9uPGFueSwgYW55PltdID0gW1xyXG4gIG1hcCgocmVzOiBhbnkpID0+ICtyZXMucmVzcG9uc2Uubm90ZV9jb3VudClcclxuXTtcclxuIiwiaW1wb3J0IHtcclxuICBtZXRhVGFnc09wZXJhdG9ycyxcclxuICBwcmludE9wZXJhdG9ycyxcclxuICBjb3B5T3BlcmF0b3JzLFxyXG4gIHVybEluTWVzc2FnZU9wZXJhdG9ycyxcclxuICBGYWNlYm9va0NvdW50T3BlcmF0b3JzLFxyXG4gIFBpbnRlcmVzdENvdW50T3BlcmF0b3JzLFxyXG4gIFR1bWJsckNvdW50T3BlcmF0b3JzXHJcbn0gZnJvbSAnLi9zaGFyZS5vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBJU2hhcmVCdXR0b25zIH0gZnJvbSAnLi9zaGFyZS5tb2RlbHMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNoYXJlQnV0dG9uc1Byb3A6IElTaGFyZUJ1dHRvbnMgPSB7XHJcbiAgZmFjZWJvb2s6IHtcclxuICAgIHR5cGU6ICdmYWNlYm9vaycsXHJcbiAgICB0ZXh0OiAnRmFjZWJvb2snLFxyXG4gICAgaWNvbjogWydmYWInLCAnZmFjZWJvb2stZiddLFxyXG4gICAgY29sb3I6ICcjNDI2N0IyJyxcclxuICAgIHNoYXJlOiB7XHJcbiAgICAgIGRlc2t0b3A6ICdodHRwczovL3d3dy5mYWNlYm9vay5jb20vc2hhcmVyL3NoYXJlci5waHA/JyxcclxuICAgICAgYW5kcm9pZDogJ2h0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9zaGFyZXIvc2hhcmVyLnBocD8nLFxyXG4gICAgICBpb3M6ICdodHRwczovL3d3dy5mYWNlYm9vay5jb20vc2hhcmVyL3NoYXJlci5waHA/JyxcclxuICAgICAgb3BlcmF0b3JzOiBtZXRhVGFnc09wZXJhdG9ycyxcclxuICAgICAgbWV0YVRhZ3M6IHtcclxuICAgICAgICB1cmw6ICd1J1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgY291bnQ6IHtcclxuICAgICAgcmVxdWVzdDogJ2h0dHAnLFxyXG4gICAgICB1cmw6ICdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbT9pZD0nLFxyXG4gICAgICBvcGVyYXRvcnM6IEZhY2Vib29rQ291bnRPcGVyYXRvcnNcclxuICAgIH1cclxuICB9LFxyXG4gIHR3aXR0ZXI6IHtcclxuICAgIHR5cGU6ICd0d2l0dGVyJyxcclxuICAgIHRleHQ6ICdUd2l0dGVyJyxcclxuICAgIGljb246IFsnZmFiJywgJ3R3aXR0ZXInXSxcclxuICAgIGNvbG9yOiAnIzAwYWNlZScsXHJcbiAgICBzaGFyZToge1xyXG4gICAgICBkZXNrdG9wOiAnaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/JyxcclxuICAgICAgYW5kcm9pZDogJ2h0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0PycsXHJcbiAgICAgIGlvczogJ2h0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0PycsXHJcbiAgICAgIG9wZXJhdG9yczogbWV0YVRhZ3NPcGVyYXRvcnMsXHJcbiAgICAgIG1ldGFUYWdzOiB7XHJcbiAgICAgICAgdXJsOiAndXJsJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ3RleHQnLFxyXG4gICAgICAgIHRhZ3M6ICdoYXNodGFncycsXHJcbiAgICAgICAgdmlhOiAndmlhJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBnb29nbGU6IHtcclxuICAgIHR5cGU6ICdnb29nbGUnLFxyXG4gICAgdGV4dDogJ0dvb2dsZSsnLFxyXG4gICAgaWNvbjogWydmYWInLCAnZ29vZ2xlLXBsdXMtZyddLFxyXG4gICAgY29sb3I6ICcjREI0NDM3JyxcclxuICAgIHNoYXJlOiB7XHJcbiAgICAgIGRlc2t0b3A6ICdodHRwczovL3BsdXMuZ29vZ2xlLmNvbS9zaGFyZT8nLFxyXG4gICAgICBhbmRyb2lkOiAnaHR0cHM6Ly9wbHVzLmdvb2dsZS5jb20vc2hhcmU/JyxcclxuICAgICAgaW9zOiAnaHR0cHM6Ly9wbHVzLmdvb2dsZS5jb20vc2hhcmU/JyxcclxuICAgICAgbWV0YVRhZ3M6IHtcclxuICAgICAgICB1cmw6ICd1cmwnLFxyXG4gICAgICB9LFxyXG4gICAgICBvcGVyYXRvcnM6IG1ldGFUYWdzT3BlcmF0b3JzXHJcbiAgICB9XHJcbiAgfSxcclxuICBsaW5rZWRpbjoge1xyXG4gICAgdHlwZTogJ2xpbmtlZGluJyxcclxuICAgIHRleHQ6ICdMaW5rZWRJbicsXHJcbiAgICBpY29uOiBbJ2ZhYicsICdsaW5rZWRpbi1pbiddLFxyXG4gICAgY29sb3I6ICcjMDA2ZmE2JyxcclxuICAgIHNoYXJlOiB7XHJcbiAgICAgIGRlc2t0b3A6ICdodHRwOi8vd3d3LmxpbmtlZGluLmNvbS9zaGFyZUFydGljbGU/JyxcclxuICAgICAgYW5kcm9pZDogJ2h0dHA6Ly93d3cubGlua2VkaW4uY29tL3NoYXJlQXJ0aWNsZT8nLFxyXG4gICAgICBpb3M6ICdodHRwOi8vd3d3LmxpbmtlZGluLmNvbS9zaGFyZUFydGljbGU/JyxcclxuICAgICAgb3BlcmF0b3JzOiBtZXRhVGFnc09wZXJhdG9ycyxcclxuICAgICAgbWV0YVRhZ3M6IHtcclxuICAgICAgICB1cmw6ICd1cmwnLFxyXG4gICAgICAgIHRpdGxlOiAndGl0bGUnLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnc3VtbWFyeSdcclxuICAgICAgfSxcclxuICAgIH1cclxuICB9LFxyXG4gIHBpbnRlcmVzdDoge1xyXG4gICAgdHlwZTogJ3BpbnRlcmVzdCcsXHJcbiAgICB0ZXh0OiAnUGludGVyZXN0JyxcclxuICAgIGljb246IFsnZmFiJywgJ3BpbnRlcmVzdC1wJ10sXHJcbiAgICBjb2xvcjogJyNCRDA5MUQnLFxyXG4gICAgc2hhcmU6IHtcclxuICAgICAgZGVza3RvcDogJ2h0dHBzOi8vaW4ucGludGVyZXN0LmNvbS9waW4vY3JlYXRlL2J1dHRvbi8/JyxcclxuICAgICAgYW5kcm9pZDogJ2h0dHBzOi8vaW4ucGludGVyZXN0LmNvbS9waW4vY3JlYXRlL2J1dHRvbi8/JyxcclxuICAgICAgaW9zOiAnaHR0cHM6Ly9pbi5waW50ZXJlc3QuY29tL3Bpbi9jcmVhdGUvYnV0dG9uLz8nLFxyXG4gICAgICBvcGVyYXRvcnM6IG1ldGFUYWdzT3BlcmF0b3JzLFxyXG4gICAgICBtZXRhVGFnczoge1xyXG4gICAgICAgIHVybDogJ3VybCcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdkZXNjcmlwdGlvbicsXHJcbiAgICAgICAgaW1hZ2U6ICdtZWRpYSdcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNvdW50OiB7XHJcbiAgICAgIHJlcXVlc3Q6ICdodHRwJyxcclxuICAgICAgdXJsOiAnaHR0cHM6Ly9hcGkucGludGVyZXN0LmNvbS92MS91cmxzL2NvdW50Lmpzb24/dXJsPScsXHJcbiAgICAgIGFyZ3M6IHtyZXNwb25zZVR5cGU6ICd0ZXh0J30sXHJcbiAgICAgIG9wZXJhdG9yczogUGludGVyZXN0Q291bnRPcGVyYXRvcnNcclxuICAgIH1cclxuICB9LFxyXG4gIHJlZGRpdDoge1xyXG4gICAgdHlwZTogJ3JlZGRpdCcsXHJcbiAgICB0ZXh0OiAnUmVkZGl0JyxcclxuICAgIGljb246IFsnZmFiJywgJ3JlZGRpdC1hbGllbiddLFxyXG4gICAgY29sb3I6ICcjRkY0MDA2JyxcclxuICAgIHNoYXJlOiB7XHJcbiAgICAgIGRlc2t0b3A6ICdodHRwOi8vd3d3LnJlZGRpdC5jb20vc3VibWl0PycsXHJcbiAgICAgIGFuZHJvaWQ6ICdodHRwOi8vd3d3LnJlZGRpdC5jb20vc3VibWl0PycsXHJcbiAgICAgIGlvczogJ2h0dHA6Ly93d3cucmVkZGl0LmNvbS9zdWJtaXQ/JyxcclxuICAgICAgb3BlcmF0b3JzOiBtZXRhVGFnc09wZXJhdG9ycyxcclxuICAgICAgbWV0YVRhZ3M6IHtcclxuICAgICAgICB1cmw6ICd1cmwnLFxyXG4gICAgICAgIHRpdGxlOiAndGl0bGUnXHJcbiAgICAgIH0sXHJcbiAgICB9XHJcbiAgfSxcclxuICB0dW1ibHI6IHtcclxuICAgIHR5cGU6ICd0dW1ibHInLFxyXG4gICAgdGV4dDogJ1R1bWJscicsXHJcbiAgICBpY29uOiBbJ2ZhYicsICd0dW1ibHInXSxcclxuICAgIGNvbG9yOiAnIzM2NDY1RCcsXHJcbiAgICBzaGFyZToge1xyXG4gICAgICBkZXNrdG9wOiAnaHR0cDovL3R1bWJsci5jb20vd2lkZ2V0cy9zaGFyZS90b29sPycsXHJcbiAgICAgIGFuZHJvaWQ6ICdodHRwOi8vdHVtYmxyLmNvbS93aWRnZXRzL3NoYXJlL3Rvb2w/JyxcclxuICAgICAgaW9zOiAnaHR0cDovL3R1bWJsci5jb20vd2lkZ2V0cy9zaGFyZS90b29sPycsXHJcbiAgICAgIG9wZXJhdG9yczogbWV0YVRhZ3NPcGVyYXRvcnMsXHJcbiAgICAgIG1ldGFUYWdzOiB7XHJcbiAgICAgICAgdXJsOiAnY2Fub25pY2FsVXJsJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ2NhcHRpb24nLFxyXG4gICAgICAgIHRhZ3M6ICd0YWdzJ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgY291bnQ6IHtcclxuICAgICAgcmVxdWVzdDogJ2pzb25wJyxcclxuICAgICAgdXJsOiAnaHR0cHM6Ly9hcGkudHVtYmxyLmNvbS92Mi9zaGFyZS9zdGF0cz91cmw9JyxcclxuICAgICAgb3BlcmF0b3JzOiBUdW1ibHJDb3VudE9wZXJhdG9yc1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgd2hhdHNhcHA6IHtcclxuICAgIHR5cGU6ICd3aGF0c2FwcCcsXHJcbiAgICB0ZXh0OiAnV2hhdHNBcHAnLFxyXG4gICAgaWNvbjogWydmYWInLCAnd2hhdHNhcHAnXSxcclxuICAgIGNvbG9yOiAnIzI1RDM2NicsXHJcbiAgICBzaGFyZToge1xyXG4gICAgICBkZXNrdG9wOiAnaHR0cHM6Ly93ZWIud2hhdHNhcHAuY29tL3NlbmQ/JyxcclxuICAgICAgYW5kcm9pZDogJ3doYXRzYXBwOi8vc2VuZD8nLFxyXG4gICAgICBpb3M6ICd3aGF0c2FwcDovL3NlbmQ/JyxcclxuICAgICAgb3BlcmF0b3JzOiBbXHJcbiAgICAgICAgLi4udXJsSW5NZXNzYWdlT3BlcmF0b3JzLFxyXG4gICAgICAgIC4uLm1ldGFUYWdzT3BlcmF0b3JzXHJcbiAgICAgIF0sXHJcbiAgICAgIG1ldGFUYWdzOiB7XHJcbiAgICAgICAgZGVzY3JpcHRpb246ICd0ZXh0J1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBtZXNzZW5nZXI6IHtcclxuICAgIHR5cGU6ICdtZXNzZW5nZXInLFxyXG4gICAgdGV4dDogJ01lc3NlbmdlcicsXHJcbiAgICBpY29uOiBbJ2ZhYicsICdmYWNlYm9vay1tZXNzZW5nZXInXSxcclxuICAgIGNvbG9yOiAnIzAwODBGRicsXHJcbiAgICBzaGFyZToge1xyXG4gICAgICBhbmRyb2lkOiAnZmItbWVzc2VuZ2VyOi8vc2hhcmUvPycsXHJcbiAgICAgIGlvczogJ2ZiLW1lc3NlbmdlcjovL3NoYXJlLz8nLFxyXG4gICAgICBvcGVyYXRvcnM6IG1ldGFUYWdzT3BlcmF0b3JzLFxyXG4gICAgICBtZXRhVGFnczoge1xyXG4gICAgICAgIHVybDogJ2xpbmsnXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIHRlbGVncmFtOiB7XHJcbiAgICB0eXBlOiAndGVsZWdyYW0nLFxyXG4gICAgdGV4dDogJ1RlbGVncmFtJyxcclxuICAgIGljb246IFsnZmFiJywgJ3RlbGVncmFtLXBsYW5lJ10sXHJcbiAgICBjb2xvcjogJyMwMDg4Y2MnLFxyXG4gICAgc2hhcmU6IHtcclxuICAgICAgZGVza3RvcDogJ2h0dHBzOi8vdC5tZS9zaGFyZS91cmw/JyxcclxuICAgICAgYW5kcm9pZDogJ2h0dHBzOi8vdC5tZS9zaGFyZS91cmw/JyxcclxuICAgICAgaW9zOiAnaHR0cHM6Ly90Lm1lL3NoYXJlL3VybD8nLFxyXG4gICAgICBvcGVyYXRvcnM6IG1ldGFUYWdzT3BlcmF0b3JzLFxyXG4gICAgICBtZXRhVGFnczoge1xyXG4gICAgICAgIHVybDogJ3VybCcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICd0ZXh0J1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICB2azoge1xyXG4gICAgdHlwZTogJ3ZrJyxcclxuICAgIHRleHQ6ICdWS29udGFrdGUnLFxyXG4gICAgaWNvbjogWydmYWInLCAndmsnXSxcclxuICAgIGNvbG9yOiAnIzRDNzVBMycsXHJcbiAgICBzaGFyZToge1xyXG4gICAgICBkZXNrdG9wOiAnaHR0cDovL3ZrLmNvbS9zaGFyZS5waHA/JyxcclxuICAgICAgYW5kcm9pZDogJ2h0dHA6Ly92ay5jb20vc2hhcmUucGhwPycsXHJcbiAgICAgIGlvczogJ2h0dHA6Ly92ay5jb20vc2hhcmUucGhwPycsXHJcbiAgICAgIG9wZXJhdG9yczogbWV0YVRhZ3NPcGVyYXRvcnMsXHJcbiAgICAgIG1ldGFUYWdzOiB7XHJcbiAgICAgICAgdXJsOiAndXJsJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBzdHVtYmxlOiB7XHJcbiAgICB0eXBlOiAnc3R1bWJsZScsXHJcbiAgICB0ZXh0OiAnU3R1bWJsZScsXHJcbiAgICBpY29uOiBbJ2ZhYicsICdzdHVtYmxldXBvbiddLFxyXG4gICAgY29sb3I6ICcjZWI0OTI0JyxcclxuICAgIHNoYXJlOiB7XHJcbiAgICAgIGRlc2t0b3A6ICdodHRwOi8vd3d3LnN0dW1ibGV1cG9uLmNvbS9zdWJtaXQ/JyxcclxuICAgICAgYW5kcm9pZDogJ2h0dHA6Ly93d3cuc3R1bWJsZXVwb24uY29tL3N1Ym1pdD8nLFxyXG4gICAgICBpb3M6ICdodHRwOi8vd3d3LnN0dW1ibGV1cG9uLmNvbS9zdWJtaXQ/JyxcclxuICAgICAgb3BlcmF0b3JzOiBtZXRhVGFnc09wZXJhdG9ycyxcclxuICAgICAgbWV0YVRhZ3M6IHtcclxuICAgICAgICB1cmw6ICd1cmwnXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIHhpbmc6IHtcclxuICAgIHR5cGU6ICd4aW5nJyxcclxuICAgIHRleHQ6ICdYaW5nJyxcclxuICAgIGljb246IFsnZmFiJywgJ3hpbmcnXSxcclxuICAgIGNvbG9yOiAnIzAwNjU2NycsXHJcbiAgICBzaGFyZToge1xyXG4gICAgICBkZXNrdG9wOiAnaHR0cHM6Ly93d3cueGluZy5jb20vYXBwL3VzZXI/b3A9c2hhcmUmJyxcclxuICAgICAgYW5kcm9pZDogJ2h0dHBzOi8vd3d3LnhpbmcuY29tL2FwcC91c2VyP29wPXNoYXJlJicsXHJcbiAgICAgIGlvczogJ2h0dHBzOi8vd3d3LnhpbmcuY29tL2FwcC91c2VyP29wPXNoYXJlJicsXHJcbiAgICAgIG9wZXJhdG9yczogbWV0YVRhZ3NPcGVyYXRvcnMsXHJcbiAgICAgIG1ldGFUYWdzOiB7XHJcbiAgICAgICAgdXJsOiAndXJsJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBzbXM6IHtcclxuICAgIHR5cGU6ICdzbXMnLFxyXG4gICAgdGV4dDogJ1NNUycsXHJcbiAgICBpY29uOiAnY29tbWVudC1hbHQnLFxyXG4gICAgY29sb3I6ICcjMjBjMTZjJyxcclxuICAgIHNoYXJlOiB7XHJcbiAgICAgIGRlc2t0b3A6ICdzbXM6PycsXHJcbiAgICAgIGFuZHJvaWQ6ICdzbXM6PycsXHJcbiAgICAgIGlvczogJ3NtczomJyxcclxuICAgICAgbWV0YVRhZ3M6IHtcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ2JvZHknXHJcbiAgICAgIH0sXHJcbiAgICAgIG9wZXJhdG9yczogW1xyXG4gICAgICAgIC4uLnVybEluTWVzc2FnZU9wZXJhdG9ycyxcclxuICAgICAgICAuLi5tZXRhVGFnc09wZXJhdG9yc1xyXG4gICAgICBdXHJcbiAgICB9XHJcbiAgfSxcclxuICBlbWFpbDoge1xyXG4gICAgdHlwZTogJ2VtYWlsJyxcclxuICAgIHRleHQ6ICdFbWFpbCcsXHJcbiAgICBpY29uOiAgJ2VudmVsb3BlJyxcclxuICAgIGNvbG9yOiAnI0ZGOTYxQycsXHJcbiAgICBzaGFyZToge1xyXG4gICAgICBkZXNrdG9wOiAnbWFpbHRvOj8nLFxyXG4gICAgICBhbmRyb2lkOiAnbWFpbHRvOj8nLFxyXG4gICAgICBpb3M6ICdtYWlsdG86PycsXHJcbiAgICAgIG9wZXJhdG9yczogW1xyXG4gICAgICAgIC4uLnVybEluTWVzc2FnZU9wZXJhdG9ycyxcclxuICAgICAgICAuLi5tZXRhVGFnc09wZXJhdG9yc1xyXG4gICAgICBdLFxyXG4gICAgICBtZXRhVGFnczoge1xyXG4gICAgICAgIHRpdGxlOiAnc3ViamVjdCcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdib2R5J1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBjb3B5OiB7XHJcbiAgICB0eXBlOiAnY29weScsXHJcbiAgICB0ZXh0OiAnQ29weSBsaW5rJyxcclxuICAgIHN1Y2Nlc3NUZXh0OiAnQ29waWVkJyxcclxuICAgIHN1Y2Nlc3NJY29uOiAnY2hlY2snLFxyXG4gICAgZmFpbFRleHQ6ICdFcnJvcicsXHJcbiAgICBmYWlsSWNvbjogJ2V4Y2xhbWF0aW9uJyxcclxuICAgIGljb246ICdsaW5rJyxcclxuICAgIGNvbG9yOiAnIzYwN0Q4QicsXHJcbiAgICBzaGFyZToge1xyXG4gICAgICBvcGVyYXRvcnM6IGNvcHlPcGVyYXRvcnNcclxuICAgIH1cclxuICB9LFxyXG4gIHByaW50OiB7XHJcbiAgICB0eXBlOiAncHJpbnQnLFxyXG4gICAgdGV4dDogJ1ByaW50JyxcclxuICAgIGljb246ICdwcmludCcsXHJcbiAgICBjb2xvcjogJyM3NjVBQTInLFxyXG4gICAgc2hhcmU6IHtcclxuICAgICAgb3BlcmF0b3JzOiBwcmludE9wZXJhdG9yc1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuIiwiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSVNoYXJlQnV0dG9uLCBTaGFyZUJ1dHRvbnNDb25maWcsIENPTkZJRyB9IGZyb20gJy4vc2hhcmUubW9kZWxzJztcclxuaW1wb3J0IHsgc2hhcmVCdXR0b25zUHJvcCB9IGZyb20gJy4vc2hhcmUucHJvcCc7XHJcbmltcG9ydCB7IG1lcmdlRGVlcCB9IGZyb20gJy4vdXRpbHMnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU2hhcmVTZXJ2aWNlIHtcclxuXHJcbiAgY29uZmlnOiBTaGFyZUJ1dHRvbnNDb25maWcgPSB7XHJcbiAgICBwcm9wOiBzaGFyZUJ1dHRvbnNQcm9wLFxyXG4gICAgb3B0aW9uczoge1xyXG4gICAgICB0aGVtZTogJ2RlZmF1bHQnLFxyXG4gICAgICBpbmNsdWRlOiBbXSxcclxuICAgICAgZXhjbHVkZTogW10sXHJcbiAgICAgIHNpemU6IDAsXHJcbiAgICAgIHVybDogbnVsbCxcclxuICAgICAgdGl0bGU6IG51bGwsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiBudWxsLFxyXG4gICAgICBpbWFnZTogbnVsbCxcclxuICAgICAgdGFnczogbnVsbCxcclxuICAgICAgdHdpdHRlckFjY291bnQ6IG51bGwsXHJcbiAgICAgIGF1dG9TZXRNZXRhOiB0cnVlLFxyXG4gICAgICBnYVRyYWNraW5nOiBmYWxzZSxcclxuICAgICAgd2luZG93V2lkdGg6IDgwMCxcclxuICAgICAgd2luZG93SGVpZ2h0OiA1MDAsXHJcbiAgICAgIG1vcmVCdXR0b25JY29uOiAnZWxsaXBzaXMtaCcsXHJcbiAgICAgIGxlc3NCdXR0b25JY29uOiAnbWludXMnXHJcbiAgICB9XHJcbiAgfTtcclxuICBjb25maWckID0gbmV3IEJlaGF2aW9yU3ViamVjdCh0aGlzLmNvbmZpZyk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoQ09ORklHKSBjb25maWc6IFNoYXJlQnV0dG9uc0NvbmZpZykge1xyXG4gICAgdGhpcy5zZXRDb25maWcoY29uZmlnKTtcclxuICB9XHJcblxyXG4gIGdldCBwcm9wKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnByb3A7XHJcbiAgfVxyXG5cclxuICBnZXQgdHdpdHRlckFjY291bnQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWcub3B0aW9ucy50d2l0dGVyQWNjb3VudDtcclxuICB9XHJcblxyXG4gIGdldCB0aGVtZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZy5vcHRpb25zLnRoZW1lO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHdpbmRvd1NpemUoKSB7XHJcbiAgICByZXR1cm4gYHdpZHRoPSR7dGhpcy5jb25maWcub3B0aW9ucy53aW5kb3dXaWR0aH0sIGhlaWdodD0ke3RoaXMuY29uZmlnLm9wdGlvbnMud2luZG93SGVpZ2h0fWA7XHJcbiAgfVxyXG5cclxuICBnZXQgdXJsKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLm9wdGlvbnMudXJsO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHRpdGxlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLm9wdGlvbnMudGl0bGU7XHJcbiAgfVxyXG5cclxuICBnZXQgZGVzY3JpcHRpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWcub3B0aW9ucy5kZXNjcmlwdGlvbjtcclxuICB9XHJcblxyXG4gIGdldCBpbWFnZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZy5vcHRpb25zLmltYWdlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHRhZ3MoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWcub3B0aW9ucy50YWdzO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGF1dG9TZXRNZXRhKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLm9wdGlvbnMuYXV0b1NldE1ldGE7XHJcbiAgfVxyXG5cclxuICBnZXQgZ2FUcmFja2luZygpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZy5vcHRpb25zLmdhVHJhY2tpbmc7XHJcbiAgfVxyXG5cclxuICBnZXQgc2l6ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZy5vcHRpb25zLnNpemU7XHJcbiAgfVxyXG5cclxuICBzZXRDb25maWcoY29uZmlnOiBTaGFyZUJ1dHRvbnNDb25maWcpIHtcclxuICAgIGlmIChjb25maWcpIHtcclxuICAgICAgdGhpcy5jb25maWcgPSBtZXJnZURlZXAodGhpcy5jb25maWcsIGNvbmZpZyk7XHJcbiAgICAgIHRoaXMuY29uZmlnJC5uZXh0KHRoaXMuY29uZmlnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFkZEJ1dHRvbihuYW1lOiBzdHJpbmcsIGRhdGE6IElTaGFyZUJ1dHRvbikge1xyXG4gICAgY29uc3QgY29uZmlnID0ge1xyXG4gICAgICBwcm9wOiB7Li4uc2hhcmVCdXR0b25zUHJvcCwgLi4ue1tuYW1lXTogZGF0YX19XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zZXRDb25maWcoY29uZmlnKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgSW5wdXQsXHJcbiAgT3V0cHV0LFxyXG4gIEhvc3RMaXN0ZW5lcixcclxuICBJbmplY3QsXHJcbiAgT25DaGFuZ2VzLFxyXG4gIE9uRGVzdHJveSxcclxuICBTaW1wbGVDaGFuZ2VzLFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBFbGVtZW50UmVmLFxyXG4gIFJlbmRlcmVyMixcclxuICBDaGFuZ2VEZXRlY3RvclJlZlxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE1ldGEgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xyXG5cclxuaW1wb3J0IHsgb2YsIGludGVydmFsLCBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24sIFN1YnNjcmlwdGlvbkxpa2UsIEVNUFRZIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRhcCwgdGFrZSwgc3dpdGNoTWFwLCB0YWtlV2hpbGUsIGZpbmFsaXplLCBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuaW1wb3J0IHsgU2hhcmVTZXJ2aWNlIH0gZnJvbSAnLi9zaGFyZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSVNoYXJlQnV0dG9uLCBJU2hhcmVDb3VudCwgU2hhcmVCdXR0b25SZWYgfSBmcm9tICcuL3NoYXJlLm1vZGVscyc7XHJcbmltcG9ydCB7IGdldFZhbGlkVXJsIH0gZnJvbSAnLi91dGlscyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tzaGFyZUJ1dHRvbl0sIFtzaGFyZS1idXR0b25dJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU2hhcmVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcblxyXG4gIC8qKiBBIHJlZiB0byBidXR0b24gY2xhc3MgLSB1c2VkIHRvIHJlbW92ZSBwcmV2aW91cyBjbGFzcyB3aGVuIHRoZSBidXR0b24gdHlwZSBpcyBjaGFuZ2VkICovXHJcbiAgcHJpdmF0ZSBfYnV0dG9uQ2xhc3M6IHN0cmluZztcclxuXHJcbiAgLyoqIHNoYXJlIHdpbmRvdyBjbG9zZWQgc3Vic2NyaXB0aW9uICh0byB1bnN1YnNjcmliZSBpZiB0aGUgYnV0dG9uIGlzIGRlc3Ryb3llZCBiZWZvcmUgdGhlIHNoYXJlIHdpbmRvdyBjbG9zZXMpICovXHJcbiAgcHJpdmF0ZSBfc2hhcmVXaW5kb3dDbG9zZWQ6IFN1YnNjcmlwdGlvbkxpa2UgPSBTdWJzY3JpcHRpb24uRU1QVFk7XHJcblxyXG4gIC8qKiBCdXR0b24gcHJvcGVydGllcyAqL1xyXG4gIHByb3A6IElTaGFyZUJ1dHRvbjtcclxuXHJcbiAgLyoqIFNoYXJlIGJ1dHRvbiB0eXBlICovXHJcbiAgQElucHV0KCkgc2hhcmVCdXR0b246IHN0cmluZztcclxuXHJcbiAgLyoqIEdldCBzaGFyZSBjb3VudCAqL1xyXG4gIEBJbnB1dCgpIGdldENvdW50ID0gZmFsc2U7XHJcblxyXG4gIC8qKiBTZXQgbWV0YSB0YWdzIGZyb20gZG9jdW1lbnQgaGVhZCwgdXNlZnVsIHdoZW4gU0VPIGlzIHN1cHBvcnRlZCAqL1xyXG4gIEBJbnB1dCgpIGF1dG9TZXRNZXRhOiBib29sZWFuID0gdGhpcy5zaGFyZVNlcnZpY2UuYXV0b1NldE1ldGE7XHJcblxyXG4gIC8qKiBNZXRhIHRhZ3MgaW5wdXRzIC0gaW5pdGlhbGl6ZWQgZnJvbSB0aGUgZ2xvYmFsIG9wdGlvbnMgKi9cclxuICBASW5wdXQoKSB1cmw6IHN0cmluZyA9IHRoaXMuc2hhcmVTZXJ2aWNlLnVybDtcclxuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nID0gdGhpcy5zaGFyZVNlcnZpY2UudGl0bGU7XHJcbiAgQElucHV0KCkgZGVzY3JpcHRpb246IHN0cmluZyA9IHRoaXMuc2hhcmVTZXJ2aWNlLmRlc2NyaXB0aW9uO1xyXG4gIEBJbnB1dCgpIGltYWdlOiBzdHJpbmcgPSB0aGlzLnNoYXJlU2VydmljZS5pbWFnZTtcclxuICBASW5wdXQoKSB0YWdzOiBzdHJpbmcgPSB0aGlzLnNoYXJlU2VydmljZS50YWdzO1xyXG5cclxuICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBzaGFyZSBjb3VudCBpcyBmZXRjaGVkICovXHJcbiAgQE91dHB1dCgpIGNvdW50ID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XHJcblxyXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIHNoYXJlIGRpYWxvZyBpcyBvcGVuZWQgKi9cclxuICBAT3V0cHV0KCkgb3BlbmVkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XHJcblxyXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIHNoYXJlIGRpYWxvZyBpcyBjbG9zZWQgKi9cclxuICBAT3V0cHV0KCkgY2xvc2VkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbWV0YTogTWV0YSxcclxuICAgICAgICAgICAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcclxuICAgICAgICAgICAgICBwcml2YXRlIHBsYXRmb3JtOiBQbGF0Zm9ybSxcclxuICAgICAgICAgICAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBzaGFyZVNlcnZpY2U6IFNoYXJlU2VydmljZSxcclxuICAgICAgICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBhbnkpIHtcclxuICB9XHJcblxyXG4gIC8qKiBTaGFyZSBsaW5rIG9uIGVsZW1lbnQgY2xpY2sgKi9cclxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXHJcbiAgb25DbGljaygpIHtcclxuICAgIGlmICh0aGlzLnBsYXRmb3JtLmlzQnJvd3Nlcikge1xyXG4gICAgICBjb25zdCBtZXRhVGFncyA9IHRoaXMuYXV0b1NldE1ldGEgPyB7XHJcbiAgICAgICAgdXJsOiB0aGlzLnVybCxcclxuICAgICAgICB0aXRsZTogdGhpcy50aXRsZSB8fCB0aGlzLmdldE1ldGFUYWdDb250ZW50KCdvZzp0aXRsZScpLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uIHx8IHRoaXMuZ2V0TWV0YVRhZ0NvbnRlbnQoJ29nOmRlc2NyaXB0aW9uJyksXHJcbiAgICAgICAgaW1hZ2U6IHRoaXMuaW1hZ2UgfHwgdGhpcy5nZXRNZXRhVGFnQ29udGVudCgnb2c6aW1hZ2UnKSxcclxuICAgICAgICB2aWE6IHRoaXMuc2hhcmVTZXJ2aWNlLnR3aXR0ZXJBY2NvdW50LFxyXG4gICAgICAgIHRhZ3M6IHRoaXMudGFncyxcclxuICAgICAgfSA6IHtcclxuICAgICAgICB1cmw6IHRoaXMudXJsLFxyXG4gICAgICAgIHRpdGxlOiB0aGlzLnRpdGxlLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgIGltYWdlOiB0aGlzLmltYWdlLFxyXG4gICAgICAgIHRhZ3M6IHRoaXMudGFncyxcclxuICAgICAgICB2aWE6IHRoaXMuc2hhcmVTZXJ2aWNlLnR3aXR0ZXJBY2NvdW50LFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gU2hhcmUgdGhlIGxpbmtcclxuICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICBvZjxTaGFyZUJ1dHRvblJlZj4oe1xyXG4gICAgICAgIGVsOiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsXHJcbiAgICAgICAgcmVuZGVyZXI6IHRoaXMucmVuZGVyZXIsXHJcbiAgICAgICAgcHJvcDogdGhpcy5wcm9wLFxyXG4gICAgICAgIGNkOiB0aGlzLmNkLFxyXG4gICAgICAgIGRvY3VtZW50OiB0aGlzLmRvY3VtZW50LFxyXG4gICAgICAgIHBsYXRmb3JtOiB0aGlzLmdldFBsYXRmb3JtKCksXHJcbiAgICAgICAgbWV0YVRhZ3NcclxuICAgICAgfSkucGlwZShcclxuICAgICAgICAuLi50aGlzLnByb3Auc2hhcmUub3BlcmF0b3JzLFxyXG4gICAgICAgIHRhcCgoc2hhcmVyVVJMOiBhbnkpID0+IHRoaXMuc2hhcmUoc2hhcmVyVVJMKSksXHJcbiAgICAgICAgdGFrZSgxKVxyXG4gICAgICApLnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgaWYgKHRoaXMucGxhdGZvcm0uaXNCcm93c2VyKSB7XHJcblxyXG4gICAgICBpZiAoY2hhbmdlc1snc2hhcmVCdXR0b24nXSAmJiAoY2hhbmdlc1snc2hhcmVCdXR0b24nXS5maXJzdENoYW5nZSB8fCBjaGFuZ2VzWydzaGFyZUJ1dHRvbiddLnByZXZpb3VzVmFsdWUgIT09IHRoaXMuc2hhcmVCdXR0b24pKSB7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVTaGFyZUJ1dHRvbih0aGlzLnNoYXJlQnV0dG9uKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCF0aGlzLnVybCB8fCAoY2hhbmdlc1sndXJsJ10gJiYgY2hhbmdlc1sndXJsJ10ucHJldmlvdXNWYWx1ZSAhPT0gdGhpcy51cmwpKSB7XHJcbiAgICAgICAgdGhpcy51cmwgPSBnZXRWYWxpZFVybChcclxuICAgICAgICAgIHRoaXMuYXV0b1NldE1ldGFcclxuICAgICAgICAgICAgPyB0aGlzLnVybCB8fCB0aGlzLmdldE1ldGFUYWdDb250ZW50KCdvZzp1cmwnKVxyXG4gICAgICAgICAgICA6IHRoaXMudXJsLFxyXG4gICAgICAgICAgdGhpcy5kb2N1bWVudC5kZWZhdWx0Vmlldy5sb2NhdGlvbi5ocmVmXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodGhpcy5nZXRDb3VudCAmJiB0aGlzLnByb3AuY291bnQpIHtcclxuICAgICAgICAgIHRoaXMuc2hhcmVDb3VudCh0aGlzLnVybCkuc3Vic2NyaWJlKChjb3VudDogbnVtYmVyKSA9PiB0aGlzLmNvdW50LmVtaXQoY291bnQpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgdGhpcy5fc2hhcmVXaW5kb3dDbG9zZWQudW5zdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE9wZW4gc2hhcmluZyBkaWFsb2dcclxuICAgKiBAcGFyYW0gdXJsIC0gU2hhcmUgVVJMXHJcbiAgICovXHJcbiAgc2hhcmUodXJsOiBzdHJpbmcpIHtcclxuICAgIGlmICh1cmwpIHtcclxuXHJcbiAgICAgIC8vIEdBIFRyYWNraW5nXHJcbiAgICAgIGlmICh0aGlzLnNoYXJlU2VydmljZS5nYVRyYWNraW5nICYmICg8YW55PnRoaXMuZG9jdW1lbnQuZGVmYXVsdFZpZXcpLmdhKSB7XHJcbiAgICAgICAgKDxhbnk+dGhpcy5kb2N1bWVudC5kZWZhdWx0VmlldykuZ2EoJ3NlbmQnLCAnc29jaWFsJywgdGhpcy5wcm9wLnR5cGUsICdjbGljaycsIHRoaXMudXJsKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gT3BlbiBzaGFyZSBwb3AgdXAgYW5kIGFjdGl2YXRlIGl0cyBvcGVuZWQgYW5kIGNsb3NlZCBldmVudHNcclxuICAgICAgdGhpcy5fc2hhcmVXaW5kb3dDbG9zZWQgPSBvZih0aGlzLmRvY3VtZW50LmRlZmF1bHRWaWV3Lm9wZW4odXJsLCAnbmV3d2luZG93JywgdGhpcy5zaGFyZVNlcnZpY2Uud2luZG93U2l6ZSkpLnBpcGUoXHJcbiAgICAgICAgdGFwKCgpID0+IHRoaXMub3BlbmVkLmVtaXQodGhpcy5wcm9wLnR5cGUpKSxcclxuICAgICAgICBzd2l0Y2hNYXAoKHBvcFVwOiBhbnkpID0+IGludGVydmFsKDIwMCkucGlwZSh0YWtlV2hpbGUoKCkgPT4gIXBvcFVwLmNsb3NlZCkpKSxcclxuICAgICAgICBmaW5hbGl6ZSgoKSA9PiB0aGlzLmNsb3NlZC5lbWl0KHRoaXMucHJvcC50eXBlKSlcclxuICAgICAgKS5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNoYXJlQ291bnQoc2hhcmVVcmw6IHN0cmluZyk6IE9ic2VydmFibGU8bnVtYmVyPiB7XHJcbiAgICBjb25zdCBvcHRpb25zOiBJU2hhcmVDb3VudCA9IHRoaXMucHJvcC5jb3VudDtcclxuICAgIHJldHVybiBvcHRpb25zLnJlcXVlc3QgPT09ICdqc29ucCdcclxuICAgICAgP1xyXG4gICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgIHRoaXMuaHR0cC5qc29ucDxhbnk+KG9wdGlvbnMudXJsICsgc2hhcmVVcmwsICdjYWxsYmFjaycpLnBpcGUoXHJcbiAgICAgICAgLi4ub3B0aW9ucy5vcGVyYXRvcnMsXHJcbiAgICAgICAgY2F0Y2hFcnJvcigoKSA9PiBFTVBUWSksXHJcbiAgICAgIClcclxuICAgICAgOlxyXG4gICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgIHRoaXMuaHR0cC5nZXQ8YW55PihvcHRpb25zLnVybCArIHNoYXJlVXJsLCBvcHRpb25zLmFyZ3MpLnBpcGUoXHJcbiAgICAgICAgLi4ub3B0aW9ucy5vcGVyYXRvcnMsXHJcbiAgICAgICAgY2F0Y2hFcnJvcigoKSA9PiBFTVBUWSlcclxuICAgICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlU2hhcmVCdXR0b24oYnV0dG9uc05hbWU6IHN0cmluZykge1xyXG5cclxuICAgIGNvbnN0IGJ1dHRvbjogSVNoYXJlQnV0dG9uID0gey4uLnRoaXMuc2hhcmVTZXJ2aWNlLnByb3BbYnV0dG9uc05hbWVdfTtcclxuXHJcbiAgICBpZiAoYnV0dG9uKSB7XHJcbiAgICAgIC8vIFNldCBzaGFyZSBidXR0b24gcHJvcGVydGllc1xyXG4gICAgICB0aGlzLnByb3AgPSBidXR0b247XHJcblxyXG4gICAgICAvLyBSZW1vdmUgcHJldmlvdXMgYnV0dG9uIGNsYXNzXHJcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCBgc2ItJHt0aGlzLl9idXR0b25DbGFzc31gKTtcclxuXHJcbiAgICAgIC8vIEFkZCBuZXcgYnV0dG9uIGNsYXNzXHJcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCBgc2ItJHtidXR0b24udHlwZX1gKTtcclxuXHJcbiAgICAgIC8vIFNldCBidXR0b24gY3NzIGNvbG9yIHZhcmlhYmxlXHJcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1idXR0b24tY29sb3InLCB0aGlzLnByb3AuY29sb3IpO1xyXG5cclxuICAgICAgLy8gS2VlcCBhIGNvcHkgb2YgdGhlIGNsYXNzIGZvciBmdXR1cmUgcmVwbGFjZW1lbnRcclxuICAgICAgdGhpcy5fYnV0dG9uQ2xhc3MgPSBidXR0b24udHlwZTtcclxuXHJcbiAgICAgIC8vIFNldCBhcmlhLWxhYmVsIGF0dHJpYnV0ZVxyXG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdhcmlhLWxhYmVsJywgYnV0dG9uLmFyaWFMYWJlbCB8fCBidXR0b24udGV4dCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFtTaGFyZUJ1dHRvbnNdOiBUaGUgc2hhcmUgYnV0dG9uICcke2J1dHRvbnNOYW1lfScgZG9lcyBub3QgZXhpc3QhYCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiogR2V0IG1ldGEgdGFnIGNvbnRlbnQgKi9cclxuICBwcml2YXRlIGdldE1ldGFUYWdDb250ZW50KGtleTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IG1ldGFVc2luZ1Byb3BlcnR5OiBIVE1MTWV0YUVsZW1lbnQgPSB0aGlzLm1ldGEuZ2V0VGFnKGBwcm9wZXJ0eT1cIiR7a2V5fVwiYCk7XHJcbiAgICBpZiAobWV0YVVzaW5nUHJvcGVydHkpIHJldHVybiBtZXRhVXNpbmdQcm9wZXJ0eS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKTtcclxuICAgIGNvbnN0IG1ldGFVc2luZ05hbWU6IEhUTUxNZXRhRWxlbWVudCA9IHRoaXMubWV0YS5nZXRUYWcoYG5hbWU9XCIke2tleX1cImApO1xyXG4gICAgaWYgKG1ldGFVc2luZ05hbWUpIHJldHVybiBtZXRhVXNpbmdOYW1lLmdldEF0dHJpYnV0ZSgnY29udGVudCcpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRQbGF0Zm9ybSgpIHtcclxuICAgIGlmICh0aGlzLnBsYXRmb3JtLklPUykgcmV0dXJuICdvaXMnO1xyXG4gICAgaWYgKHRoaXMucGxhdGZvcm0uQU5EUk9JRCkgcmV0dXJuICdhbmRyb2lkJztcclxuICAgIHJldHVybiAnZGVza3RvcCc7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgc2hhcmVDb3VudEZvcm1hdHRlciB9IGZyb20gJy4vdXRpbHMnO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdzaGFyZUNvdW50J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU2hhcmVDb3VudFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0obnVtOiBudW1iZXIsIGRpZ2l0cz86IG51bWJlcikge1xyXG4gICAgcmV0dXJuIHNoYXJlQ291bnRGb3JtYXR0ZXIobnVtLCBkaWdpdHMpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbGF0Zm9ybU1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wbGF0Zm9ybSc7XHJcblxyXG5pbXBvcnQgeyBTaGFyZURpcmVjdGl2ZSB9IGZyb20gJy4vc2hhcmUtYnV0dG9uLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IFNoYXJlQ291bnRQaXBlIH0gZnJvbSAnLi9zaGFyZS1jb3VudC5waXBlJztcclxuaW1wb3J0IHsgU2hhcmVCdXR0b25zQ29uZmlnLCBDT05GSUcgfSBmcm9tICcuL3NoYXJlLm1vZGVscyc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIFBsYXRmb3JtTW9kdWxlXHJcbiAgXSxcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIFNoYXJlRGlyZWN0aXZlLFxyXG4gICAgU2hhcmVDb3VudFBpcGVcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtcclxuICAgIFNoYXJlRGlyZWN0aXZlLFxyXG4gICAgU2hhcmVDb3VudFBpcGVcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTaGFyZU1vZHVsZSB7XHJcbiAgc3RhdGljIGZvclJvb3QoY29uZmlnPzogU2hhcmVCdXR0b25zQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogU2hhcmVNb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIHtwcm92aWRlOiBDT05GSUcsIHVzZVZhbHVlOiBjb25maWd9XHJcbiAgICAgIF1cclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJJbmplY3Rpb25Ub2tlbiIsIm9mIiwidGFwIiwibWFwIiwic3dpdGNoTWFwIiwiY2F0Y2hFcnJvciIsImRlbGF5IiwiQmVoYXZpb3JTdWJqZWN0IiwiSW5qZWN0YWJsZSIsIk9wdGlvbmFsIiwiSW5qZWN0IiwiaHR0cCIsInBsYXRmb3JtIiwiU3Vic2NyaXB0aW9uIiwiRXZlbnRFbWl0dGVyIiwidGFrZSIsImludGVydmFsIiwidGFrZVdoaWxlIiwiZmluYWxpemUiLCJFTVBUWSIsIkRpcmVjdGl2ZSIsIk1ldGEiLCJFbGVtZW50UmVmIiwiSHR0cENsaWVudCIsIlBsYXRmb3JtIiwiUmVuZGVyZXIyIiwiQ2hhbmdlRGV0ZWN0b3JSZWYiLCJET0NVTUVOVCIsIklucHV0IiwiT3V0cHV0IiwiSG9zdExpc3RlbmVyIiwiUGlwZSIsIk5nTW9kdWxlIiwiUGxhdGZvcm1Nb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7OztJQUFBOzs7Ozs7Ozs7Ozs7OztBQWNBLElBZU8sSUFBSSxRQUFRLEdBQUc7UUFDbEIsUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksU0FBUyxRQUFRLENBQUMsQ0FBQztZQUMzQyxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDakQsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakIsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDO29CQUFFLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7d0JBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNoRjtZQUNELE9BQU8sQ0FBQyxDQUFDO1NBQ1osQ0FBQTtRQUNELE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFD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